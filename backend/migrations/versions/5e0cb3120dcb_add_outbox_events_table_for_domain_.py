"""Add outbox events table for domain events

Revision ID: 5e0cb3120dcb
Revises: 1a2b3c4d5e6f
Create Date: 2025-09-03 14:15:01.747740

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5e0cb3120dcb'
down_revision: Union[str, Sequence[str], None] = '1a2b3c4d5e6f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('outbox_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.String(), nullable=False),
    sa.Column('aggregate_id', sa.Integer(), nullable=False),
    sa.Column('aggregate_type', sa.String(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('event_metadata', sa.JSON(), nullable=True),
    sa.Column('processed', sa.Boolean(), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('last_retry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_outbox_events_aggregate_id'), 'outbox_events', ['aggregate_id'], unique=False)
    op.create_index(op.f('ix_outbox_events_created_at'), 'outbox_events', ['created_at'], unique=False)
    op.create_index(op.f('ix_outbox_events_event_id'), 'outbox_events', ['event_id'], unique=True)
    op.create_index(op.f('ix_outbox_events_event_type'), 'outbox_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_outbox_events_id'), 'outbox_events', ['id'], unique=False)
    op.create_index(op.f('ix_outbox_events_processed'), 'outbox_events', ['processed'], unique=False)
    
    # Try to drop indexes if they exist (they may not exist in all databases)
    try:
        op.drop_index(op.f('idx_comments_is_private'), table_name='comments')
    except:
        pass
    try:
        op.drop_index(op.f('idx_comments_post_id'), table_name='comments')
    except:
        pass
    try:
        op.drop_index(op.f('idx_posts_category_created'), table_name='posts')
    except:
        pass
    try:
        op.drop_index(op.f('idx_posts_is_private'), table_name='posts')
    except:
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_posts_is_private'), 'posts', ['is_private'], unique=False)
    op.create_index(op.f('idx_posts_category_created'), 'posts', ['category_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_comments_post_id'), 'comments', ['post_id'], unique=False)
    op.create_index(op.f('idx_comments_is_private'), 'comments', ['is_private'], unique=False)
    op.drop_index(op.f('ix_outbox_events_processed'), table_name='outbox_events')
    op.drop_index(op.f('ix_outbox_events_id'), table_name='outbox_events')
    op.drop_index(op.f('ix_outbox_events_event_type'), table_name='outbox_events')
    op.drop_index(op.f('ix_outbox_events_event_id'), table_name='outbox_events')
    op.drop_index(op.f('ix_outbox_events_created_at'), table_name='outbox_events')
    op.drop_index(op.f('ix_outbox_events_aggregate_id'), table_name='outbox_events')
    op.drop_table('outbox_events')
    # ### end Alembic commands ###
