// Auto-generated Zod validators from core schemas
// DO NOT EDIT - Generated by scripts/generate-core-validators.js
import { z } from 'zod';

// TranslatedTerm Schema
export const TranslatedTermSchema = z.object({
  source: z.string().describe("Source term in the source language"),
  korean: z.string().describe("Korean translation")
});
export type TranslatedTerm = z.infer<typeof TranslatedTermSchema>;

// CharacterInteraction Schema
export const CharacterInteractionSchema = z.object({
  character_name: z.string().describe("Name of the character the protagonist is speaking to"),
  speech_style: z.enum(["반말", "해요체", "하십시오체"]).describe("Korean speech style used (반말 for informal, 해요체 for polite informal, 하십시오체 for formal)")
});
export type CharacterInteraction = z.infer<typeof CharacterInteractionSchema>;

// NarrationStyle Schema
export const NarrationStyleSchema = z.object({
  description: z.string().describe("Brief description of the narrator's voice (e.g., 'A neutral, third-person observer's voice')"),
  ending_style: z.string().optional().describe("Korean sentence ending style for narration (almost always 해라체)")
});
export type NarrationStyle = z.infer<typeof NarrationStyleSchema>;

// ValidationCase Schema
export const ValidationCaseSchema = z.object({
  current_korean_sentence: z.string().describe("문제가 되는 현재 한국어 문장 (최대 1~2문장)"),
  problematic_source_sentence: z.string().describe("대응하는 원문 문장 (최대 1~2문장)"),
  reason: z.string().describe("왜 문제인지"),
  dimension: z.enum(["completeness", "accuracy", "addition", "name_consistency", "dialogue_style", "flow", "other"]).describe("이슈 차원(카테고리)"),
  severity: z.enum(["1", "2", "3"]).describe("이슈의 심각도. 1(사소함), 2(중대함), 3(치명적) 중 하나의 숫자로 표기."),
  recommend_korean_sentence: z.string().describe("권장 수정 번역문"),
  tags: z.array(z.string()).optional().describe("보조 라벨(예: terminology, formality, punctuation)")
});
export type ValidationCase = z.infer<typeof ValidationCaseSchema>;

// ExtractedTerms Schema
export const ExtractedTermsSchema = z.object({
  terms: z.array(z.string()).optional().describe("List of unique proper nouns found in the text. Empty list if none found.")
});
export type ExtractedTerms = z.infer<typeof ExtractedTermsSchema>;

// TranslatedTerms Schema
export const TranslatedTermsSchema = z.object({
  translations: z.array(TranslatedTermSchema).optional().describe("List of term translations")
});
export type TranslatedTerms = z.infer<typeof TranslatedTermsSchema>;

// DialogueAnalysisResult Schema
export const DialogueAnalysisResultSchema = z.object({
  protagonist_name: z.string().describe("Name of the protagonist"),
  interactions: z.array(CharacterInteractionSchema).optional().describe("List of character interactions found in this segment"),
  has_dialogue: z.boolean().optional().describe("Whether the protagonist has any dialogue in this segment")
});
export type DialogueAnalysisResult = z.infer<typeof DialogueAnalysisResultSchema>;

// NarrativeStyleDefinition Schema
export const NarrativeStyleDefinitionSchema = z.object({
  protagonist_name: z.string().describe("The single most central character's name. If unclear, 'Protagonist'"),
  narration_style: NarrationStyleSchema.describe("Style and endings for narrative text"),
  core_tone_keywords: z.array(z.string()).describe("3-5 keywords describing the overall mood (Korean)"),
  golden_rule: z.string().describe("Overarching rule for the novel's feel and rhythm")
});
export type NarrativeStyleDefinition = z.infer<typeof NarrativeStyleDefinitionSchema>;

// StyleDeviation Schema
export const StyleDeviationSchema = z.object({
  has_deviation: z.boolean().describe("Whether a style deviation was detected"),
  starts_with: z.string().nullable().optional().describe("The first few words of the deviating part"),
  instruction: z.string().nullable().optional().describe("Direct command for the translator regarding this deviation")
});
export type StyleDeviation = z.infer<typeof StyleDeviationSchema>;

// ValidationResponse Schema
export const ValidationResponseSchema = z.object({
  cases: z.array(ValidationCaseSchema).optional().describe("List of validation issues found. Empty list if no issues.")
});
export type ValidationResponse = z.infer<typeof ValidationResponseSchema>;

// Helper functions for validation
export function validateValidationResponse(data: unknown) {
  return ValidationResponseSchema.parse(data);
}

export function validatePostEditResponse(data: unknown) {
  // Since we don't have PostEditResponse schema yet, return data as-is
  // TODO: Add PostEditResponseSchema when available
  return data;
}

export function validateAnalysisLogEntry(data: unknown) {
  // Since we don't have AnalysisLogEntry schema yet, return data as-is
  // TODO: Add AnalysisLogEntrySchema when available
  return data;
}

// Safe validation functions that return null on error
export function safeValidateValidationResponse(data: unknown) {
  try {
    return ValidationResponseSchema.parse(data);
  } catch {
    return null;
  }
}
