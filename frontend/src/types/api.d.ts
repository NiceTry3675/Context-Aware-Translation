/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Jobs
         * @description List all translation jobs for the current user.
         *
         *     Args:
         *         skip: Number of jobs to skip for pagination
         *         limit: Maximum number of jobs to return
         *         user: Current authenticated user
         *         service: Translation domain service
         *
         *     Returns:
         *         List of translation jobs
         */
        get: operations["list_jobs_api_v1_jobs_get"];
        put?: never;
        /**
         * Create Job
         * @description Create a new translation job.
         *
         *     Args:
         *         file: File to translate
         *         api_key: API key for translation service
         *         model_name: Default model name
         *         translation_model_name: Optional override for translation model
         *         style_model_name: Optional override for style model
         *         glossary_model_name: Optional override for glossary model
         *         style_data: Optional style data
         *         glossary_data: Optional glossary data
         *         segment_size: Segment size for translation
         *         enable_validation: Whether to run validation automatically after translation
         *         quick_validation: Whether to use quick validation mode
         *         validation_sample_rate: Portion of segments to validate (0.0-1.0)
         *         enable_post_edit: Whether to run post-edit automatically after validation
         *         user: Current authenticated user
         *         service: Translation domain service
         *
         *     Returns:
         *         Created translation job
         */
        post: operations["create_job_api_v1_jobs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job
         * @description Get a translation job by ID.
         *
         *     Args:
         *         job_id: Job ID
         *         service: Translation domain service
         *
         *     Returns:
         *         Translation job
         */
        get: operations["get_job_api_v1_jobs__job_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Job
         * @description Delete a translation job.
         *
         *     Args:
         *         job_id: Job ID to delete
         *         user: Current authenticated user
         *         service: Translation domain service
         *
         *     Returns:
         *         204 No Content response
         */
        delete: operations["delete_job_api_v1_jobs__job_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Content
         * @description Get the complete content of a translation job.
         *
         *     Args:
         *         job_id: Job ID
         *         service: Translation domain service
         *
         *     Returns:
         *         Dict containing the job content and segments
         */
        get: operations["get_job_content_api_v1_jobs__job_id__content_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Segments
         * @description Get segments from a translation job with pagination.
         *
         *     Args:
         *         job_id: Job ID
         *         offset: Number of segments to skip
         *         limit: Maximum number of segments to return
         *         service: Translation domain service
         *
         *     Returns:
         *         Dict containing paginated segments
         */
        get: operations["get_job_segments_api_v1_jobs__job_id__segments_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resume Job
         * @description Resume a failed translation job.
         */
        post: operations["resume_job_api_v1_jobs__job_id__resume_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/validate/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Job
         * @description Trigger validation on a completed translation job.
         *
         *     Args:
         *         job_id: Job ID
         *         request: Validation request parameters
         *         user: Current authenticated user
         *         db: Database session
         *
         *     Returns:
         *         Task information for the validation job
         */
        post: operations["validate_job_api_v1_validate__job_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/validation/{job_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Validation Status
         * @description Get the validation report for a job.
         *
         *     Args:
         *         job_id: Job ID
         *         structured: Whether to return structured response
         *         user: Current authenticated user
         *         db: Database session
         *
         *     Returns:
         *         Validation report (structured or plain)
         */
        get: operations["get_validation_status_api_v1_validation__job_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/post-edit/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post Edit Job
         * @description Trigger post-editing on a validated translation job.
         *
         *     Args:
         *         job_id: Job ID
         *         request: Post-edit request parameters
         *         user: Current authenticated user
         *     Returns:
         *         Task information for the post-edit job
         */
        post: operations["post_edit_job_api_v1_post_edit__job_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/post-edit/{job_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Post Edit Status
         * @description Get the post-edit report for a job.
         *
         *     Args:
         *         job_id: Job ID
         *         user: Current authenticated user
         *     Returns:
         *         Post-edit report with changes and statistics
         */
        get: operations["get_post_edit_status_api_v1_post_edit__job_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/download/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download File
         * @description Download the output of a translation job.
         *
         *     Args:
         *         job_id: Job ID
         *         user: Current authenticated user (from dependency)
         *         db: Database session (from dependency)
         *
         *     Returns:
         *         FileResponse with the translated file
         */
        get: operations["download_file_api_v1_download__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/export/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Job
         * @description Export translation job in different formats.
         *
         *     Args:
         *         job_id: Job ID
         *         format: Export format (pdf, etc.)
         *         include_source: Whether to include source text
         *         include_illustrations: Whether to include illustrations
         *         page_size: Page size format
         *         user: Current authenticated user (from dependency)
         *         db: Database session (from dependency)
         *
         *     Returns:
         *         Response with exported file
         */
        post: operations["export_job_api_v1_export__job_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Pdf
         * @description Download translation as PDF using query parameters.
         */
        get: operations["download_pdf_api_v1_jobs__job_id__pdf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/glossary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Glossary
         * @description Download glossary for a translation job.
         *     If structured=true, returns structured glossary JSON payload.
         *     Otherwise returns raw dictionary JSON.
         */
        get: operations["download_glossary_api_v1_jobs__job_id__glossary_get"];
        put?: never;
        /**
         * Upload Glossary
         * @description Upload and apply glossary to a job (merge or replace).
         *     Accepts flexible formats: dict, array of {source,korean}, array of {term,translation}, etc.
         */
        post: operations["upload_glossary_api_v1_jobs__job_id__glossary_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/style": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Style
         * @description Analyze the narrative style of a document.
         *
         *     Args:
         *         file: Uploaded file to analyze
         *         api_key: API key for the AI model
         *         model_name: Model to use for analysis
         *
         *     Returns:
         *         StyleAnalysisResponse with analysis results
         */
        post: operations["analyze_style_api_v1_analysis_style_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/glossary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Glossary
         * @description Extract glossary terms from a document.
         *
         *     Args:
         *         file: Uploaded file to analyze
         *         api_key: API key for the AI model
         *         model_name: Model to use for analysis
         *
         *     Returns:
         *         GlossaryAnalysisResponse with extracted terms
         */
        post: operations["analyze_glossary_api_v1_analysis_glossary_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/characters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Characters
         * @description Analyze characters in a document.
         *
         *     Args:
         *         file: Uploaded file to analyze
         *         api_key: API key for the AI model
         *         model_name: Model to use for analysis
         *
         *     Returns:
         *         CharacterAnalysisResponse with character analysis results
         */
        post: operations["analyze_characters_api_v1_analysis_characters_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Illustration Config
         * @description Get illustration configuration settings.
         *     Tells the frontend whether to use client-side storage for illustrations.
         */
        get: operations["get_illustration_config_api_v1_illustrations_config_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Illustrations
         * @description Generate illustration prompts for a translation job.
         *
         *     This endpoint triggers generation of detailed illustration prompts for all or selected segments
         *     of a completed translation job. The prompts can then be used with image generation services
         *     like DALL-E, Midjourney, or Stable Diffusion to create actual illustrations.
         *
         *     Expects JSON body with:
         *     - config: IllustrationConfig object
         *     - api_key: API key for Gemini
         *     - max_illustrations: Optional maximum number of illustrations
         */
        post: operations["generate_illustrations_api_v1_illustrations__job_id__generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Character Bases
         * @description Generate base character images (3 variations) focusing only on appearance.
         */
        post: operations["generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/appearance/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Character Appearance
         * @description Analyze early novel text to produce appearance-only prompt candidates for the protagonist.
         *
         *     Expects JSON body with:
         *     - api_key: API key for model
         *     - protagonist_name: Optional protagonist name
         *     - model_name: Model name for analysis (default: gemini-flash-latest)
         */
        post: operations["analyze_character_appearance_api_v1_illustrations__job_id__character_appearance_analyze_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/generate-from-prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Base From Prompt
         * @description Generate base image(s) directly from provided prompt text(s).
         *     Accepts either JSON body with { prompts: string[] } or multipart with prompts_json/prompt.
         */
        post: operations["generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Character Bases
         * @description Get generated base character images and current selection.
         */
        get: operations["get_character_bases_api_v1_illustrations__job_id__character_base_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Character Base Asset
         * @description Get a specific base asset (image if available, otherwise prompt JSON).
         */
        get: operations["get_character_base_asset_api_v1_illustrations__job_id__character_base__index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/select": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Select Character Base
         * @description Select one of the generated base images by index.
         */
        post: operations["select_character_base_api_v1_illustrations__job_id__character_base_select_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Illustrations Status
         * @description Get the illustration generation status for a translation job.
         *
         *     Returns lightweight status information without loading all illustration data.
         */
        get: operations["get_illustrations_status_api_v1_illustrations__job_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/illustrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Illustrations
         * @description Get all illustration prompts for a translation job.
         *
         *     Returns metadata about all generated illustration prompts for the specified job.
         *     These prompts can be used with external image generation services.
         */
        get: operations["get_job_illustrations_api_v1_illustrations__job_id__illustrations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/illustration/{segment_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Illustration Prompt
         * @description Get the illustration for a specific segment.
         *
         *     Returns the generated image if available, otherwise returns the prompt JSON file.
         *     For client-side storage mode, returns base64 data from job metadata.
         */
        get: operations["get_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__get"];
        put?: never;
        post?: never;
        /**
         * Delete Illustration Prompt
         * @description Delete a specific illustration and its prompt.
         *
         *     Removes both the image file (if exists) and prompt file, and updates the job metadata.
         */
        delete: operations["delete_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/regenerate/{segment_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Regenerate Illustration Prompt
         * @description Regenerate an illustration prompt for a specific segment.
         *
         *     This allows regenerating a single illustration prompt with optional new style hints or custom prompt.
         *
         *     Expects JSON body with:
         *     - api_key: API key for Gemini
         *     - style_hints: Optional style hints for regeneration
         *     - custom_prompt: Optional custom prompt to override automatic generation
         */
        post: operations["regenerate_illustration_prompt_api_v1_illustrations__job_id__regenerate__segment_index__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/{base_index}/regenerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Regenerate Character Base
         * @description Regenerate a specific character base image with custom prompt.
         *
         *     Expects JSON body with:
         *     - custom_prompt: Custom prompt to use for regeneration
         */
        post: operations["regenerate_character_base_api_v1_illustrations__job_id__character_base__base_index__regenerate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Status
         * @description Get the status of a specific task.
         *
         *     Returns both database tracking info and real-time Celery status.
         */
        get: operations["get_task_status_api_v1_tasks__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tasks
         * @description List tasks with optional filters.
         *
         *     - Users can see their own tasks
         *     - Admins can see all tasks
         *     - Anonymous users can't see any tasks
         */
        get: operations["list_tasks_api_v1_tasks__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/{task_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Task
         * @description Cancel a running task.
         *
         *     Only the task owner or an admin can cancel a task.
         */
        post: operations["cancel_task_api_v1_tasks__task_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/job/{job_id}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Tasks
         * @description Get all tasks associated with a specific job.
         */
        get: operations["get_job_tasks_api_v1_tasks_job__job_id__tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/stats/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Stats
         * @description Get task execution statistics.
         *
         *     Admin only endpoint.
         */
        get: operations["get_task_stats_api_v1_tasks_stats_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Posts
         * @description Get posts with filtering and pagination.
         */
        get: operations["list_posts_api_v1_community_posts_get"];
        put?: never;
        /**
         * Create Post
         * @description Create a new post.
         */
        post: operations["create_post_api_v1_community_posts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Categories
         * @description Return all community categories.
         */
        get: operations["list_categories_api_v1_community_categories_get"];
        put?: never;
        /**
         * Create Category
         * @description Create a new category (admin only).
         */
        post: operations["create_category_api_v1_community_categories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/categories/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Categories Overview
         * @description Return categories with aggregated statistics and recent posts.
         */
        get: operations["list_categories_overview_api_v1_community_categories_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts/{post_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Post
         * @description Get a specific post with comments.
         */
        get: operations["get_post_api_v1_community_posts__post_id__get"];
        /**
         * Update Post
         * @description Update an existing post.
         */
        put: operations["update_post_api_v1_community_posts__post_id__put"];
        post?: never;
        /**
         * Delete Post
         * @description Delete a post.
         */
        delete: operations["delete_post_api_v1_community_posts__post_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts/{post_id}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Increment Post View
         * @description Increment the view count for a post.
         */
        post: operations["increment_post_view_api_v1_community_posts__post_id__view_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts/{post_id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Post Comments
         * @description Get comments for a specific post.
         */
        get: operations["list_post_comments_api_v1_community_posts__post_id__comments_get"];
        put?: never;
        /**
         * Create Comment
         * @description Create a comment on a post.
         */
        post: operations["create_comment_api_v1_community_posts__post_id__comments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/comments/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Comment
         * @description Update an existing comment.
         */
        put: operations["update_comment_api_v1_community_comments__comment_id__put"];
        post?: never;
        /**
         * Delete Comment
         * @description Delete a comment.
         */
        delete: operations["delete_comment_api_v1_community_comments__comment_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Image
         * @description Handle community image uploads.
         */
        post: operations["upload_image_api_v1_community_images_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/categories/{category_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Category
         * @description Get a specific category.
         */
        get: operations["get_category_api_v1_community_categories__category_id__get"];
        /**
         * Update Category
         * @description Update a category (admin only).
         */
        put: operations["update_category_api_v1_community_categories__category_id__put"];
        post?: never;
        /**
         * Delete Category
         * @description Delete a category (admin only).
         */
        delete: operations["delete_category_api_v1_community_categories__category_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/announcements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Announcements
         * @description Get announcements with optional filtering.
         */
        get: operations["list_announcements_api_v1_community_announcements_get"];
        put?: never;
        /**
         * Create Announcement
         * @description Create a new announcement (admin only).
         */
        post: operations["create_announcement_api_v1_community_announcements_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/announcements/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream Announcements
         * @description Stream announcements via Server-Sent Events (SSE).
         */
        get: operations["stream_announcements_api_v1_community_announcements_stream_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/announcements/{announcement_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Announcement
         * @description Update an existing announcement (admin only).
         */
        put: operations["update_announcement_api_v1_community_announcements__announcement_id__put"];
        post?: never;
        /**
         * Delete Announcement
         * @description Delete an announcement (admin only).
         */
        delete: operations["delete_announcement_api_v1_community_announcements__announcement_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get the current user's profile.
         */
        get: operations["get_current_user_api_v1_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me/token-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Token Usage
         * @description Return the authenticated user's token usage summary.
         */
        get: operations["get_token_usage_api_v1_users_me_token_usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/posts/{post_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Any Post
         * @description Delete any post (requires POST_DELETE_ANY permission).
         */
        delete: operations["delete_any_post_api_v1_admin_posts__post_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/core": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Core Schemas
         * @description Get all core JSON schemas used in structured output.
         *
         *     Returns a dictionary mapping schema names to their JSON schema definitions.
         *     These schemas are used by Gemini's structured output feature.
         */
        get: operations["get_core_schemas_api_v1_schemas_core_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/core/{schema_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Core Schema
         * @description Get a specific core JSON schema by name.
         *
         *     Args:
         *         schema_name: Name of the schema to retrieve
         *
         *     Returns:
         *         The JSON schema definition for the specified schema
         *
         *     Raises:
         *         404 if schema not found
         */
        get: operations["get_core_schema_api_v1_schemas_core__schema_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/backend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Backend Schemas
         * @description Get all backend API schemas (DTOs).
         *
         *     Returns schemas used in FastAPI endpoints for request/response models.
         */
        get: operations["get_backend_schemas_api_v1_schemas_backend_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description Health check endpoint.
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Announcement */
        Announcement: {
            /** Message */
            message: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** AnnouncementCreate */
        AnnouncementCreate: {
            /** Message */
            message: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
        };
        /**
         * AuthorSummary
         * @description Minimal author information for community content.
         */
        AuthorSummary: {
            /** Id */
            id: number;
            /** Name */
            name?: string | null;
        };
        /** Body_analyze_characters_api_v1_analysis_characters_post */
        Body_analyze_characters_api_v1_analysis_characters_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Api Key */
            api_key: string;
            /**
             * Model Name
             * @default gemini-flash-lite-latest
             */
            model_name: string;
            /**
             * Api Provider
             * @default gemini
             */
            api_provider: string;
            /** Provider Config */
            provider_config?: string | null;
        };
        /** Body_analyze_glossary_api_v1_analysis_glossary_post */
        Body_analyze_glossary_api_v1_analysis_glossary_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Api Key */
            api_key: string;
            /**
             * Model Name
             * @default gemini-flash-lite-latest
             */
            model_name: string;
            /**
             * Api Provider
             * @default gemini
             */
            api_provider: string;
            /** Provider Config */
            provider_config?: string | null;
        };
        /** Body_analyze_style_api_v1_analysis_style_post */
        Body_analyze_style_api_v1_analysis_style_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Api Key */
            api_key: string;
            /**
             * Model Name
             * @default gemini-flash-lite-latest
             */
            model_name: string;
            /**
             * Api Provider
             * @default gemini
             */
            api_provider: string;
            /** Provider Config */
            provider_config?: string | null;
        };
        /** Body_create_job_api_v1_jobs_post */
        Body_create_job_api_v1_jobs_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Api Key */
            api_key: string;
            /**
             * Model Name
             * @default gemini-flash-lite-latest
             */
            model_name: string;
            /** Translation Model Name */
            translation_model_name?: string | null;
            /** Style Model Name */
            style_model_name?: string | null;
            /** Glossary Model Name */
            glossary_model_name?: string | null;
            /** Style Data */
            style_data?: string | null;
            /** Glossary Data */
            glossary_data?: string | null;
            /**
             * Segment Size
             * @default 15000
             */
            segment_size: number;
            /**
             * Enable Validation
             * @default false
             */
            enable_validation: boolean;
            /**
             * Quick Validation
             * @default false
             */
            quick_validation: boolean;
            /**
             * Validation Sample Rate
             * @default 1
             */
            validation_sample_rate: number;
            /**
             * Enable Post Edit
             * @default false
             */
            enable_post_edit: boolean;
            /**
             * Api Provider
             * @default gemini
             */
            api_provider: string;
            /** Provider Config */
            provider_config?: string | null;
            /**
             * Turbo Mode
             * @default false
             */
            turbo_mode: boolean;
        };
        /** Body_generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post */
        Body_generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post: {
            /**
             * Api Key
             * @description API key for Gemini
             */
            api_key: string;
            /** Reference Image */
            reference_image?: string | null;
            /** Prompts Json */
            prompts_json?: string | null;
            /** Prompt */
            prompt?: string | null;
            /**
             * Num Variations
             * @description How many variants to generate when a single prompt is provided
             * @default 3
             */
            num_variations: number;
        };
        /** Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post */
        Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post: {
            /**
             * Api Key
             * @description API key for Gemini
             */
            api_key: string;
            /** Reference Image */
            reference_image?: string | null;
            /** Profile Json */
            profile_json?: string | null;
        };
        /** Body_upload_image_api_v1_community_images_post */
        Body_upload_image_api_v1_community_images_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * CategoryOverview
         * @description Extended category information for overview responses.
         */
        CategoryOverview: {
            /** Name */
            name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description?: string | null;
            /**
             * Is Admin Only
             * @default false
             */
            is_admin_only: boolean;
            /**
             * Order
             * @default 0
             */
            order: number;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Total Posts */
            total_posts: number;
            /** Can Post */
            can_post: boolean;
            /** Recent Posts */
            recent_posts?: components["schemas"]["PostSummary"][];
        };
        /**
         * CharacterAnalysisResponse
         * @description Response for character analysis
         */
        CharacterAnalysisResponse: {
            /** Characters */
            characters: {
                [key: string]: unknown;
            }[];
            /** Interactions */
            interactions?: components["schemas"]["CharacterInteraction"][] | null;
            /** Dialogue Analysis */
            dialogue_analysis?: components["schemas"]["DialogueAnalysisResult"][] | null;
        };
        /**
         * CharacterInteraction
         * @description Single interaction between protagonist and another character.
         */
        CharacterInteraction: {
            /**
             * Character Name
             * @description Name of the character the protagonist is speaking to
             */
            character_name: string;
            /**
             * Speech Style
             * @description Korean speech style used (반말 for informal, 해요체 for polite informal, 하십시오체 for formal)
             * @enum {string}
             */
            speech_style: "반말" | "해요체" | "하십시오체";
        };
        /** Comment */
        Comment: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Content */
            content: string;
            /** Parent Id */
            parent_id?: number | null;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /** Id */
            id: number;
            author: components["schemas"]["AuthorSummary"];
            /** Post Id */
            post_id: number;
            /** Replies */
            replies?: components["schemas"]["Comment"][];
        };
        /** CommentCreate */
        CommentCreate: {
            /** Content */
            content: string;
            /** Parent Id */
            parent_id?: number | null;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /** Post Id */
            post_id: number;
        };
        /** CommentUpdate */
        CommentUpdate: {
            /** Content */
            content?: string | null;
            /** Is Private */
            is_private?: boolean | null;
        };
        /**
         * DialogueAnalysisResult
         * @description Result of dialogue style analysis for a text segment.
         */
        DialogueAnalysisResult: {
            /**
             * Protagonist Name
             * @description Name of the protagonist
             */
            protagonist_name: string;
            /**
             * Interactions
             * @description List of character interactions found in this segment
             */
            interactions?: components["schemas"]["CharacterInteraction"][];
            /**
             * Has Dialogue
             * @description Whether the protagonist has any dialogue in this segment
             * @default false
             */
            has_dialogue: boolean;
        };
        /**
         * ExtractedTerms
         * @description Response model for proper noun extraction.
         */
        ExtractedTerms: {
            /**
             * Terms
             * @description List of unique proper nouns found in the text. Empty list if none found.
             */
            terms?: string[];
        };
        /**
         * GlossaryAnalysisResponse
         * @description Response for glossary analysis using core schemas
         */
        GlossaryAnalysisResponse: {
            /** Glossary */
            glossary: {
                [key: string]: string;
            }[];
            extracted_terms?: components["schemas"]["ExtractedTerms"] | null;
            translated_terms?: components["schemas"]["TranslatedTerms"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** IllustrationUsageTotals */
        IllustrationUsageTotals: {
            /** Input Tokens */
            input_tokens: number;
            /** Output Tokens */
            output_tokens: number;
            /** Total Tokens */
            total_tokens: number;
            /** Image Count */
            image_count: number;
            /** Per Model */
            per_model?: components["schemas"]["ModelTokenUsage"][];
        };
        /** ModelTokenUsage */
        ModelTokenUsage: {
            /** Input Tokens */
            input_tokens: number;
            /** Output Tokens */
            output_tokens: number;
            /** Total Tokens */
            total_tokens: number;
            /** Model */
            model: string;
        };
        /**
         * NarrationStyle
         * @description Narration style details.
         */
        NarrationStyle: {
            /**
             * Description
             * @description Brief description of the narrator's voice (e.g., 'A neutral, third-person observer's voice')
             */
            description: string;
            /**
             * Ending Style
             * @description Korean sentence ending style for narration (almost always 해라체)
             * @default 해라체
             */
            ending_style: string;
        };
        /**
         * NarrativeStyleDefinition
         * @description Core narrative style definition for the entire work.
         */
        NarrativeStyleDefinition: {
            /**
             * Protagonist Name
             * @description The single most central character's name. If unclear, 'Protagonist'
             */
            protagonist_name: string;
            /** @description Style and endings for narrative text */
            narration_style: components["schemas"]["NarrationStyle"];
            /**
             * Core Tone Keywords
             * @description 3-5 keywords describing the overall mood (Korean)
             */
            core_tone_keywords: string[];
            /**
             * Golden Rule
             * @description Overarching rule for the novel's feel and rhythm
             */
            golden_rule: string;
        };
        /** Post */
        Post: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Title */
            title: string;
            /** Content */
            content: string;
            /** Category Id */
            category_id: number;
            /**
             * Is Pinned
             * @default false
             */
            is_pinned: boolean;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /** Images */
            images?: string[];
            /** Id */
            id: number;
            author: components["schemas"]["AuthorSummary"];
            category: components["schemas"]["PostCategory"];
            /** View Count */
            view_count: number;
            /** Comments */
            comments?: components["schemas"]["Comment"][];
        };
        /** PostCategory */
        PostCategory: {
            /** Name */
            name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description?: string | null;
            /**
             * Is Admin Only
             * @default false
             */
            is_admin_only: boolean;
            /**
             * Order
             * @default 0
             */
            order: number;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** PostCategoryCreate */
        PostCategoryCreate: {
            /** Name */
            name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description?: string | null;
            /**
             * Is Admin Only
             * @default false
             */
            is_admin_only: boolean;
            /**
             * Order
             * @default 0
             */
            order: number;
        };
        /** PostCreate */
        PostCreate: {
            /** Title */
            title: string;
            /** Content */
            content: string;
            /** Category Id */
            category_id: number;
            /**
             * Is Pinned
             * @default false
             */
            is_pinned: boolean;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /** Images */
            images?: string[];
        };
        /**
         * PostEditRequest
         * @description Request schema for post-editing operations.
         */
        PostEditRequest: {
            /** Selected Cases */
            selected_cases?: {
                [key: string]: unknown;
            } | null;
            /** Modified Cases */
            modified_cases?: {
                [key: string]: unknown;
            } | null;
            /**
             * Default Select All
             * @default true
             */
            default_select_all: boolean;
            /** Model Name */
            model_name?: string | null;
            /** Api Key */
            api_key?: string | null;
            /** Api Provider */
            api_provider?: string | null;
            /** Provider Config */
            provider_config?: unknown | null;
        };
        /** PostList */
        PostList: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Id */
            id: number;
            /** Title */
            title: string;
            author: components["schemas"]["AuthorSummary"];
            category: components["schemas"]["PostCategory"];
            /** Is Pinned */
            is_pinned: boolean;
            /** Is Private */
            is_private: boolean;
            /** View Count */
            view_count: number;
            /** Images */
            images?: string[];
            /**
             * Comment Count
             * @default 0
             */
            comment_count: number;
        };
        /**
         * PostSummary
         * @description Compact representation of a post for category overviews.
         */
        PostSummary: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Id */
            id: number;
            /** Title */
            title: string;
            author: components["schemas"]["AuthorSummary"];
            /** Is Pinned */
            is_pinned: boolean;
            /** Is Private */
            is_private: boolean;
            /** View Count */
            view_count: number;
            /**
             * Comment Count
             * @default 0
             */
            comment_count: number;
            /** Images */
            images?: string[];
        };
        /** PostUpdate */
        PostUpdate: {
            /** Title */
            title?: string | null;
            /** Content */
            content?: string | null;
            /** Is Private */
            is_private?: boolean | null;
            /** Is Pinned */
            is_pinned?: boolean | null;
            /** Images */
            images?: string[] | null;
        };
        /**
         * ResumeRequest
         * @description Request payload for resuming a failed translation job.
         */
        ResumeRequest: {
            /** Api Key */
            api_key?: string | null;
            /**
             * Model Name
             * @default gemini-flash-lite-latest
             */
            model_name: string | null;
            /** Translation Model Name */
            translation_model_name?: string | null;
            /** Style Model Name */
            style_model_name?: string | null;
            /** Glossary Model Name */
            glossary_model_name?: string | null;
            /**
             * Api Provider
             * @default gemini
             */
            api_provider: string | null;
            /** Provider Config */
            provider_config?: string | null;
            /**
             * Turbo Mode
             * @default false
             */
            turbo_mode: boolean | null;
        };
        /**
         * StyleAnalysisResponse
         * @description Response for style analysis - extends core NarrativeStyleDefinition
         */
        StyleAnalysisResponse: {
            /** Protagonist Name */
            protagonist_name: string;
            /** Narration Style Endings */
            narration_style_endings: string;
            /** Tone Keywords */
            tone_keywords: string;
            /** Stylistic Rule */
            stylistic_rule: string;
            narrative_style?: components["schemas"]["NarrativeStyleDefinition"] | null;
            /** Character Styles */
            character_styles?: components["schemas"]["DialogueAnalysisResult"][] | null;
        };
        /**
         * TaskExecutionListResponse
         * @description Response for list of task executions.
         */
        TaskExecutionListResponse: {
            /** Tasks */
            tasks: components["schemas"]["TaskExecutionResponse"][];
            /** Total */
            total: number;
            /**
             * Offset
             * @default 0
             */
            offset: number;
            /**
             * Limit
             * @default 20
             */
            limit: number;
            /** Page */
            page?: number | null;
            /** Page Size */
            page_size?: number | null;
        };
        /**
         * TaskExecutionResponse
         * @description Response model for task execution status.
         */
        TaskExecutionResponse: {
            /** Id */
            id: string;
            kind: components["schemas"]["TaskKind"];
            /** Name */
            name: string;
            status: components["schemas"]["TaskStatus"];
            /** Job Id */
            job_id?: number | null;
            /** Progress */
            progress?: number | null;
            /** Message */
            message?: string | null;
            /**
             * Attempts
             * @default 0
             */
            attempts: number;
            /**
             * Max Retries
             * @default 3
             */
            max_retries: number;
            /** Last Error */
            last_error?: string | null;
            /** Next Retry At */
            next_retry_at?: string | null;
            /** Queue Time */
            queue_time?: string | null;
            /** Start Time */
            start_time?: string | null;
            /** End Time */
            end_time?: string | null;
            /** Duration */
            duration?: number | null;
            /** Queue Duration */
            queue_duration?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** User Id */
            user_id?: number | null;
            /** Celery State */
            celery_state?: string | null;
            /** Celery Info */
            celery_info?: {
                [key: string]: unknown;
            } | null;
            /** Args */
            args?: unknown[] | null;
            /** Kwargs */
            kwargs?: {
                [key: string]: unknown;
            } | null;
            /** Result */
            result?: unknown | null;
        };
        /**
         * TaskKind
         * @description Types of background tasks.
         * @enum {string}
         */
        TaskKind: "translation" | "validation" | "post_edit" | "illustration" | "event_processing" | "maintenance" | "other";
        /**
         * TaskStatsSimple
         * @description Simple task statistics.
         */
        TaskStatsSimple: {
            /** Period Hours */
            period_hours: number;
            /** Status Counts */
            status_counts: {
                [key: string]: number;
            };
            /** Kind Counts */
            kind_counts: {
                [key: string]: number;
            };
            /** Average Durations */
            average_durations: {
                [key: string]: number;
            };
            /** Total Tasks */
            total_tasks: number;
        };
        /**
         * TaskStatus
         * @description Task execution status.
         * @enum {string}
         */
        TaskStatus: "pending" | "started" | "retry" | "success" | "failure" | "revoked" | "running";
        /** TokenUsageDashboard */
        TokenUsageDashboard: {
            total: components["schemas"]["TokenUsageTotals"];
            /** Per Model */
            per_model: components["schemas"]["ModelTokenUsage"][];
            illustrations: components["schemas"]["IllustrationUsageTotals"];
            /** Last Updated */
            last_updated?: string | null;
        };
        /** TokenUsageTotals */
        TokenUsageTotals: {
            /** Input Tokens */
            input_tokens: number;
            /** Output Tokens */
            output_tokens: number;
            /** Total Tokens */
            total_tokens: number;
        };
        /**
         * TranslatedTerm
         * @description Single term translation pair.
         */
        TranslatedTerm: {
            /**
             * Source
             * @description Source term in the source language
             */
            source: string;
            /**
             * Korean
             * @description Korean translation
             */
            korean: string;
        };
        /**
         * TranslatedTerms
         * @description Response model for term translation.
         */
        TranslatedTerms: {
            /**
             * Translations
             * @description List of term translations
             */
            translations?: components["schemas"]["TranslatedTerm"][];
        };
        /** TranslationJob */
        TranslationJob: {
            /** Filename */
            filename: string;
            /** Id */
            id: number;
            /** Status */
            status: string;
            /** Progress */
            progress: number;
            /** Segment Size */
            segment_size: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Completed At */
            completed_at?: string | null;
            /** Error Message */
            error_message?: string | null;
            /** Owner Id */
            owner_id?: number | null;
            /** Validation Enabled */
            validation_enabled?: boolean | null;
            /** Validation Status */
            validation_status?: string | null;
            /** Validation Progress */
            validation_progress?: number | null;
            /** Validation Sample Rate */
            validation_sample_rate?: number | null;
            /** Quick Validation */
            quick_validation?: boolean | null;
            /** Validation Completed At */
            validation_completed_at?: string | null;
            /** Validation Report Path */
            validation_report_path?: string | null;
            /** Post Edit Enabled */
            post_edit_enabled?: boolean | null;
            /** Post Edit Status */
            post_edit_status?: string | null;
            /** Post Edit Progress */
            post_edit_progress?: number | null;
            /** Post Edit Completed At */
            post_edit_completed_at?: string | null;
            /** Post Edit Log Path */
            post_edit_log_path?: string | null;
            /** Illustrations Enabled */
            illustrations_enabled?: boolean | null;
            /** Illustrations Status */
            illustrations_status?: string | null;
            /** Illustrations Progress */
            illustrations_progress?: number | null;
            /** Illustrations Count */
            illustrations_count?: number | null;
            /** Illustrations Data */
            illustrations_data?: {
                [key: string]: unknown;
            }[] | null;
            /** Character Profile */
            character_profile?: {
                [key: string]: unknown;
            } | null;
            /** Character Base Images */
            character_base_images?: {
                [key: string]: unknown;
            }[] | null;
            /** Character Base Selected Index */
            character_base_selected_index?: number | null;
            /** Character Base Directory */
            character_base_directory?: string | null;
            /** Final Glossary */
            final_glossary?: {
                [key: string]: unknown;
            } | null;
            structured_glossary?: components["schemas"]["TranslatedTerms"] | null;
        };
        /** User */
        User: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Email */
            email?: string | null;
            /** Name */
            name?: string | null;
            /** Id */
            id: number;
            /** Clerk User Id */
            clerk_user_id: string;
            /**
             * Role
             * @default user
             */
            role: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * ValidationRequest
         * @description Request schema for validation operations.
         */
        ValidationRequest: {
            /**
             * Quick Validation
             * @default false
             */
            quick_validation: boolean;
            /**
             * Validation Sample Rate
             * @default 1
             */
            validation_sample_rate: number;
            /** Model Name */
            model_name?: string | null;
            /** Api Key */
            api_key?: string | null;
            /** Api Provider */
            api_provider?: string | null;
            /** Provider Config */
            provider_config?: unknown | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_jobs_api_v1_jobs_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationJob"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_job_api_v1_jobs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_job_api_v1_jobs_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationJob"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_api_v1_jobs__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationJob"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_job_api_v1_jobs__job_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_content_api_v1_jobs__job_id__content_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_segments_api_v1_jobs__job_id__segments_get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resume_job_api_v1_jobs__job_id__resume_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResumeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationJob"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_job_api_v1_validate__job_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_validation_status_api_v1_validation__job_id__status_get: {
        parameters: {
            query?: {
                structured?: boolean;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_edit_job_api_v1_post_edit__job_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostEditRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_post_edit_status_api_v1_post_edit__job_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_file_api_v1_download__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_job_api_v1_export__job_id__post: {
        parameters: {
            query?: {
                format?: string;
                include_source?: boolean;
                include_illustrations?: boolean;
                page_size?: string;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_pdf_api_v1_jobs__job_id__pdf_get: {
        parameters: {
            query?: {
                include_source?: boolean;
                include_illustrations?: boolean;
                page_size?: string;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_glossary_api_v1_jobs__job_id__glossary_get: {
        parameters: {
            query?: {
                structured?: boolean;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_glossary_api_v1_jobs__job_id__glossary_post: {
        parameters: {
            query?: {
                mode?: string;
                structured?: boolean;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_style_api_v1_analysis_style_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_analyze_style_api_v1_analysis_style_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StyleAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_glossary_api_v1_analysis_glossary_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_analyze_glossary_api_v1_analysis_glossary_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GlossaryAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_characters_api_v1_analysis_characters_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_analyze_characters_api_v1_analysis_characters_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharacterAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_illustration_config_api_v1_illustrations_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    generate_illustrations_api_v1_illustrations__job_id__generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_character_appearance_api_v1_illustrations__job_id__character_appearance_analyze_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_character_bases_api_v1_illustrations__job_id__character_base_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_character_base_asset_api_v1_illustrations__job_id__character_base__index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    select_character_base_api_v1_illustrations__job_id__character_base_select_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: number;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_illustrations_status_api_v1_illustrations__job_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_illustrations_api_v1_illustrations__job_id__illustrations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                segment_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                segment_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    regenerate_illustration_prompt_api_v1_illustrations__job_id__regenerate__segment_index__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                segment_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    regenerate_character_base_api_v1_illustrations__job_id__character_base__base_index__regenerate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                base_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_status_api_v1_tasks__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskExecutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tasks_api_v1_tasks__get: {
        parameters: {
            query?: {
                kind?: components["schemas"]["TaskKind"] | null;
                status?: components["schemas"]["TaskStatus"] | null;
                job_id?: number | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskExecutionListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_task_api_v1_tasks__task_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_tasks_api_v1_tasks_job__job_id__tasks_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskExecutionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_stats_api_v1_tasks_stats_summary_get: {
        parameters: {
            query?: {
                /** @description Number of hours to look back */
                hours?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskStatsSimple"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_posts_api_v1_community_posts_get: {
        parameters: {
            query: {
                /** @description Category name to filter by */
                category: string;
                /** @description Search query */
                search?: string | null;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostList"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_post_api_v1_community_posts_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_categories_api_v1_community_categories_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostCategory"][];
                };
            };
        };
    };
    create_category_api_v1_community_categories_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCategoryCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostCategory"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_categories_overview_api_v1_community_categories_overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryOverview"][];
                };
            };
        };
    };
    get_post_api_v1_community_posts__post_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_post_api_v1_community_posts__post_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_post_api_v1_community_posts__post_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    increment_post_view_api_v1_community_posts__post_id__view_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_post_comments_api_v1_community_posts__post_id__comments_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_comment_api_v1_community_posts__post_id__comments_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_comment_api_v1_community_comments__comment_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comment_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_comment_api_v1_community_comments__comment_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_image_api_v1_community_images_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_image_api_v1_community_images_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_api_v1_community_categories__category_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostCategory"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_category_api_v1_community_categories__category_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCategoryCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostCategory"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_category_api_v1_community_categories__category_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_announcements_api_v1_community_announcements_get: {
        parameters: {
            query?: {
                /** @description Only return active announcements */
                active_only?: boolean;
                /** @description Maximum announcements to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Announcement"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_announcement_api_v1_community_announcements_post: {
        parameters: {
            query?: never;
            header?: {
                "x-admin-secret"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnouncementCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Announcement"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_announcements_api_v1_community_announcements_stream_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_announcement_api_v1_community_announcements__announcement_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-admin-secret"?: string;
            };
            path: {
                announcement_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnouncementCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Announcement"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_announcement_api_v1_community_announcements__announcement_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "x-admin-secret"?: string;
            };
            path: {
                announcement_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    get_token_usage_api_v1_users_me_token_usage_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenUsageDashboard"];
                };
            };
        };
    };
    delete_any_post_api_v1_admin_posts__post_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_core_schemas_api_v1_schemas_core_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_core_schema_api_v1_schemas_core__schema_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schema_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_backend_schemas_api_v1_schemas_backend_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
