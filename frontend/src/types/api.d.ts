/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/analyze-style": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Style
         * @description Analyze the narrative style of a document.
         */
        post: operations["analyze_style_api_v1_analyze_style_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analyze-glossary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Glossary
         * @description Extract glossary terms from a document.
         */
        post: operations["analyze_glossary_api_v1_analyze_glossary_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Jobs
         * @description List all translation jobs for the current user.
         */
        get: operations["list_jobs_api_v1_jobs_get"];
        put?: never;
        /**
         * Create Job
         * @description Create a new translation job.
         */
        post: operations["create_job_api_v1_jobs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job
         * @description Get a translation job.
         */
        get: operations["get_job_api_v1_jobs__job_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Job
         * @description Delete a translation job and its associated files.
         */
        delete: operations["delete_job_api_v1_jobs__job_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/download/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Job Output Legacy
         * @description Legacy download endpoint for backward compatibility.
         */
        get: operations["download_job_output_legacy_api_v1_download__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/output": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Job Output
         * @description Download the output of a translation job.
         */
        get: operations["download_job_output_api_v1_jobs__job_id__output_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/logs/{log_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Job Log
         * @description Download log files for a translation job.
         */
        get: operations["download_job_log_api_v1_jobs__job_id__logs__log_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/glossary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Glossary
         * @description Get the final glossary for a completed translation job.
         *
         *     Args:
         *         job_id: The job ID
         *         structured: If True, returns a GlossaryAnalysisResponse with structured data
         *
         *     Returns:
         *         Either raw glossary dict or GlossaryAnalysisResponse depending on 'structured' param
         */
        get: operations["get_job_glossary_api_v1_jobs__job_id__glossary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Segments
         * @description Get the segmented translation data for a completed translation job with pagination support.
         */
        get: operations["get_job_segments_api_v1_jobs__job_id__segments_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Content
         * @description Get the translated content as text for a completed translation job.
         */
        get: operations["get_job_content_api_v1_jobs__job_id__content_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Job Pdf
         * @description Download the translation as a PDF document with optional illustrations.
         *
         *     This endpoint generates a professional PDF document containing:
         *     - Translated text segments
         *     - Source text (optional)
         *     - Illustrations for each segment where available
         *     - Proper formatting and pagination
         *
         *     Args:
         *         job_id: ID of the translation job
         *         include_source: Whether to include source text alongside translations
         *         include_illustrations: Whether to embed generated illustrations
         *         page_size: Page size format (A4 or Letter)
         *
         *     Returns:
         *         PDF file response
         */
        get: operations["download_job_pdf_api_v1_jobs__job_id__pdf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Trigger Validation
         * @description Trigger validation on a completed translation job.
         */
        put: operations["trigger_validation_api_v1_jobs__job_id__validation_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/validation-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Validation Report
         * @description Get the validation report for a job.
         *
         *     Args:
         *         job_id: The job ID
         *         structured: If True, returns a StructuredValidationReport with core ValidationResponse
         *
         *     Returns:
         *         Either raw JSON report or StructuredValidationReport depending on 'structured' param
         */
        get: operations["get_validation_report_api_v1_jobs__job_id__validation_report_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/post-edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Trigger Post Edit
         * @description Trigger post-editing on a validated translation job.
         */
        put: operations["trigger_post_edit_api_v1_jobs__job_id__post_edit_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/post-edit-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Post Edit Log
         * @description Get the post-edit log for a job.
         *
         *     Args:
         *         job_id: The job ID
         *         structured: If True, returns a StructuredPostEditLog with ValidationCase objects
         *
         *     Returns:
         *         Either raw JSON log or StructuredPostEditLog depending on 'structured' param
         */
        get: operations["get_post_edit_log_api_v1_jobs__job_id__post_edit_log_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/upload-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Image
         * @description Upload an image for posts.
         */
        post: operations["upload_image_api_v1_community_upload_image_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Categories
         * @description Get all post categories.
         */
        get: operations["get_categories_api_v1_community_categories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/categories/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Categories With Recent Posts
         * @description Get categories with their recent posts for community overview.
         */
        get: operations["get_categories_with_recent_posts_api_v1_community_categories_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Posts
         * @description Get posts, masking private ones based on user permissions.
         */
        get: operations["get_posts_api_v1_community_posts_get"];
        put?: never;
        /**
         * Create Post
         * @description Create a new post.
         */
        post: operations["create_post_api_v1_community_posts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts/{post_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Post
         * @description Get a specific post, masking private comments based on user permissions.
         */
        get: operations["get_post_api_v1_community_posts__post_id__get"];
        /**
         * Update Post
         * @description Update a post.
         */
        put: operations["update_post_api_v1_community_posts__post_id__put"];
        post?: never;
        /**
         * Delete Post
         * @description Delete a post.
         */
        delete: operations["delete_post_api_v1_community_posts__post_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts/{post_id}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Increment Post View
         * @description Increment post view count (separate endpoint).
         */
        post: operations["increment_post_view_api_v1_community_posts__post_id__view_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/posts/{post_id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Comments
         * @description Get comments for a post, masking private ones based on user permissions.
         */
        get: operations["get_comments_api_v1_community_posts__post_id__comments_get"];
        put?: never;
        /**
         * Create Comment
         * @description Create a comment on a post.
         */
        post: operations["create_comment_api_v1_community_posts__post_id__comments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/community/comments/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Comment
         * @description Update a comment.
         */
        put: operations["update_comment_api_v1_community_comments__comment_id__put"];
        post?: never;
        /**
         * Delete Comment
         * @description Delete a comment.
         */
        delete: operations["delete_comment_api_v1_community_comments__comment_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/announcements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create New Announcement
         * @description Create a new announcement.
         */
        post: operations["create_new_announcement_api_v1_admin_announcements_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/announcements/{announcement_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Deactivate Existing Announcement
         * @description Deactivate a specific announcement.
         */
        put: operations["deactivate_existing_announcement_api_v1_admin_announcements__announcement_id__deactivate_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/announcements/deactivate-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Deactivate All Announcements
         * @description Deactivate all active announcements.
         */
        put: operations["deactivate_all_announcements_api_v1_admin_announcements_deactivate_all_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/community/init-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initialize Categories
         * @description Initialize default post categories.
         */
        post: operations["initialize_categories_api_v1_admin_community_init_categories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/clerk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle Clerk Webhook
         * @description Handle Clerk webhook events for user management.
         */
        post: operations["handle_clerk_webhook_api_v1_webhooks_clerk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/announcements/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream Announcements
         * @description Stream announcements via Server-Sent Events.
         */
        get: operations["stream_announcements_api_v1_announcements_stream_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/core": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Core Schemas
         * @description Get all core JSON schemas used in structured output.
         *
         *     Returns a dictionary mapping schema names to their JSON schema definitions.
         *     These schemas are used by Gemini's structured output feature.
         */
        get: operations["get_core_schemas_api_v1_schemas_core_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/core/{schema_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Core Schema
         * @description Get a specific core JSON schema by name.
         *
         *     Args:
         *         schema_name: Name of the schema to retrieve
         *
         *     Returns:
         *         The JSON schema definition for the specified schema
         *
         *     Raises:
         *         404 if schema not found
         */
        get: operations["get_core_schema_api_v1_schemas_core__schema_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/backend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Backend Schemas
         * @description Get all backend API schemas (DTOs).
         *
         *     Returns schemas used in FastAPI endpoints for request/response models.
         */
        get: operations["get_backend_schemas_api_v1_schemas_backend_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Illustrations
         * @description Generate illustration prompts for a translation job.
         *
         *     This endpoint triggers generation of detailed illustration prompts for all or selected segments
         *     of a completed translation job. The prompts can then be used with image generation services
         *     like DALL-E, Midjourney, or Stable Diffusion to create actual illustrations.
         */
        post: operations["generate_illustrations_api_v1_illustrations__job_id__generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Character Bases
         * @description Generate base character images (3 variations) focusing only on appearance.
         */
        post: operations["generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Character Bases
         * @description Get generated base character images and current selection.
         */
        get: operations["get_character_bases_api_v1_illustrations__job_id__character_base_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Character Base Asset
         * @description Get a specific base asset (image if available, otherwise prompt JSON).
         */
        get: operations["get_character_base_asset_api_v1_illustrations__job_id__character_base__index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/character/base/select": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Select Character Base
         * @description Select one of the generated base images by index.
         */
        post: operations["select_character_base_api_v1_illustrations__job_id__character_base_select_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/illustrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Illustrations
         * @description Get all illustration prompts for a translation job.
         *
         *     Returns metadata about all generated illustration prompts for the specified job.
         *     These prompts can be used with external image generation services.
         */
        get: operations["get_job_illustrations_api_v1_illustrations__job_id__illustrations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/illustration/{segment_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Illustration Prompt
         * @description Get the illustration for a specific segment.
         *
         *     Returns the generated image if available, otherwise returns the prompt JSON file.
         */
        get: operations["get_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__get"];
        put?: never;
        post?: never;
        /**
         * Delete Illustration Prompt
         * @description Delete a specific illustration and its prompt.
         *
         *     Removes both the image file (if exists) and prompt file, and updates the job metadata.
         */
        delete: operations["delete_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/illustrations/{job_id}/regenerate/{segment_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Regenerate Illustration Prompt
         * @description Regenerate an illustration prompt for a specific segment.
         *
         *     This allows regenerating a single illustration prompt with optional new style hints.
         */
        post: operations["regenerate_illustration_prompt_api_v1_illustrations__job_id__regenerate__segment_index__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description Health check endpoint.
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AnnouncementCreate */
        AnnouncementCreate: {
            /** Message */
            message: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
        };
        /** Body_analyze_glossary_api_v1_analyze_glossary_post */
        Body_analyze_glossary_api_v1_analyze_glossary_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Api Key */
            api_key: string;
            /**
             * Model Name
             * @default gemini-2.5-flash-lite
             */
            model_name: string;
        };
        /** Body_analyze_style_api_v1_analyze_style_post */
        Body_analyze_style_api_v1_analyze_style_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Api Key */
            api_key: string;
            /**
             * Model Name
             * @default gemini-2.5-flash-lite
             */
            model_name: string;
        };
        /** Body_create_job_api_v1_jobs_post */
        Body_create_job_api_v1_jobs_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Api Key */
            api_key: string;
            /**
             * Model Name
             * @default gemini-2.5-flash-lite
             */
            model_name: string;
            /** Translation Model Name */
            translation_model_name?: string | null;
            /** Style Model Name */
            style_model_name?: string | null;
            /** Glossary Model Name */
            glossary_model_name?: string | null;
            /** Style Data */
            style_data?: string;
            /** Glossary Data */
            glossary_data?: string;
            /**
             * Segment Size
             * @default 15000
             */
            segment_size: number;
        };
        /** Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post */
        Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post: {
            /** Reference Image */
            reference_image?: string | null;
            /** Profile Json */
            profile_json?: string | null;
        };
        /** Body_upload_image_api_v1_community_upload_image_post */
        Body_upload_image_api_v1_community_upload_image_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * CharacterInteraction
         * @description Single interaction between protagonist and another character.
         */
        CharacterInteraction: {
            /**
             * Character Name
             * @description Name of the character the protagonist is speaking to
             */
            character_name: string;
            /**
             * Speech Style
             * @description Korean speech style used (반말 for informal, 해요체 for polite informal, 하십시오체 for formal)
             * @enum {string}
             */
            speech_style: "반말" | "해요체" | "하십시오체";
        };
        /** Comment */
        Comment: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Content */
            content: string;
            /** Parent Id */
            parent_id?: number | null;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /** Id */
            id: number;
            author: components["schemas"]["User"];
            /** Post Id */
            post_id: number;
            /**
             * Replies
             * @default []
             */
            replies: components["schemas"]["Comment"][];
        };
        /** CommentCreate */
        CommentCreate: {
            /** Content */
            content: string;
            /** Parent Id */
            parent_id?: number | null;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /** Post Id */
            post_id: number;
        };
        /** CommentUpdate */
        CommentUpdate: {
            /** Content */
            content: string;
        };
        /**
         * DialogueAnalysisResult
         * @description Result of dialogue style analysis for a text segment.
         */
        DialogueAnalysisResult: {
            /**
             * Protagonist Name
             * @description Name of the protagonist
             */
            protagonist_name: string;
            /**
             * Interactions
             * @description List of character interactions found in this segment
             */
            interactions?: components["schemas"]["CharacterInteraction"][];
            /**
             * Has Dialogue
             * @description Whether the protagonist has any dialogue in this segment
             * @default false
             */
            has_dialogue: boolean;
        };
        /**
         * ExtractedTerms
         * @description Response model for proper noun extraction.
         */
        ExtractedTerms: {
            /**
             * Terms
             * @description List of unique proper nouns found in the text. Empty list if none found.
             */
            terms?: string[];
        };
        /**
         * GlossaryAnalysisResponse
         * @description Response for glossary analysis using core schemas
         */
        GlossaryAnalysisResponse: {
            /** Glossary */
            glossary: {
                [key: string]: string;
            }[];
            extracted_terms?: components["schemas"]["ExtractedTerms"] | null;
            translated_terms?: components["schemas"]["TranslatedTerms"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * IllustrationConfig
         * @description Configuration for illustration generation.
         *
         *     This model defines the settings and preferences for generating
         *     illustrations for translation segments.
         */
        IllustrationConfig: {
            /**
             * Enabled
             * @description Whether illustration generation is enabled
             * @default false
             */
            enabled: boolean;
            /**
             * @description The artistic style for generated illustrations
             * @default digital_art
             */
            style: components["schemas"]["IllustrationStyle"];
            /**
             * Style Hints
             * @description Additional style hints or preferences for illustration generation
             * @default
             */
            style_hints: string;
            /**
             * Segments Per Illustration
             * @description Number of segments to combine for each illustration
             * @default 1
             */
            segments_per_illustration: number;
            /**
             * Max Illustrations
             * @description Maximum number of illustrations to generate (None for unlimited)
             */
            max_illustrations?: number | null;
            /**
             * Skip Dialogue Heavy
             * @description Skip illustration for segments that are mostly dialogue
             * @default true
             */
            skip_dialogue_heavy: boolean;
            /**
             * Min Segment Length
             * @description Minimum segment length (characters) to generate illustration
             * @default 500
             */
            min_segment_length: number;
            /**
             * Cache Enabled
             * @description Whether to cache generated illustrations
             * @default true
             */
            cache_enabled: boolean;
        };
        /**
         * IllustrationStyle
         * @description Enumeration of available illustration styles.
         * @enum {string}
         */
        IllustrationStyle: "realistic" | "artistic" | "watercolor" | "digital_art" | "sketch" | "anime" | "vintage" | "minimalist";
        /**
         * NarrationStyle
         * @description Narration style details.
         */
        NarrationStyle: {
            /**
             * Description
             * @description Brief description of the narrator's voice (e.g., 'A neutral, third-person observer's voice')
             */
            description: string;
            /**
             * Ending Style
             * @description Korean sentence ending style for narration (almost always 해라체)
             * @default 해라체
             */
            ending_style: string;
        };
        /**
         * NarrativeStyleDefinition
         * @description Core narrative style definition for the entire work.
         */
        NarrativeStyleDefinition: {
            /**
             * Protagonist Name
             * @description The single most central character's name. If unclear, 'Protagonist'
             */
            protagonist_name: string;
            /** @description Style and endings for narrative text */
            narration_style: components["schemas"]["NarrationStyle"];
            /**
             * Core Tone Keywords
             * @description 3-5 keywords describing the overall mood (Korean)
             */
            core_tone_keywords: string[];
            /**
             * Golden Rule
             * @description Overarching rule for the novel's feel and rhythm
             */
            golden_rule: string;
        };
        /** Post */
        Post: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Title */
            title: string;
            /** Content */
            content: string;
            /** Category Id */
            category_id: number;
            /**
             * Is Pinned
             * @default false
             */
            is_pinned: boolean;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /**
             * Images
             * @default []
             */
            images: string[];
            /** Id */
            id: number;
            author: components["schemas"]["User"];
            category: components["schemas"]["PostCategory"];
            /** View Count */
            view_count: number;
            /**
             * Comments
             * @default []
             */
            comments: components["schemas"]["Comment"][];
        };
        /** PostCategory */
        PostCategory: {
            /** Name */
            name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description?: string | null;
            /**
             * Is Admin Only
             * @default false
             */
            is_admin_only: boolean;
            /**
             * Order
             * @default 0
             */
            order: number;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** PostCreate */
        PostCreate: {
            /** Title */
            title: string;
            /** Content */
            content: string;
            /** Category Id */
            category_id: number;
            /**
             * Is Pinned
             * @default false
             */
            is_pinned: boolean;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /**
             * Images
             * @default []
             */
            images: string[];
        };
        /** PostEditRequest */
        PostEditRequest: {
            /** Selected Cases */
            selected_cases?: {
                [key: string]: unknown;
            } | null;
            /** Model Name */
            model_name?: string | null;
            /** Api Key */
            api_key?: string | null;
        };
        /** PostList */
        PostList: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Id */
            id: number;
            /** Title */
            title: string;
            author: components["schemas"]["User"];
            category: components["schemas"]["PostCategory"];
            /** Is Pinned */
            is_pinned: boolean;
            /** Is Private */
            is_private: boolean;
            /** View Count */
            view_count: number;
            /**
             * Images
             * @default []
             */
            images: string[];
            /**
             * Comment Count
             * @default 0
             */
            comment_count: number;
        };
        /** PostUpdate */
        PostUpdate: {
            /** Title */
            title?: string | null;
            /** Content */
            content?: string | null;
            /** Is Pinned */
            is_pinned?: boolean | null;
            /** Images */
            images?: string[] | null;
        };
        /**
         * StyleAnalysisResponse
         * @description Response for style analysis - extends core NarrativeStyleDefinition
         */
        StyleAnalysisResponse: {
            /** Protagonist Name */
            protagonist_name: string;
            /** Narration Style Endings */
            narration_style_endings: string;
            /** Tone Keywords */
            tone_keywords: string;
            /** Stylistic Rule */
            stylistic_rule: string;
            narrative_style?: components["schemas"]["NarrativeStyleDefinition"] | null;
            /** Character Styles */
            character_styles?: components["schemas"]["DialogueAnalysisResult"][] | null;
        };
        /**
         * TranslatedTerm
         * @description Single term translation pair.
         */
        TranslatedTerm: {
            /**
             * Source
             * @description Source term in the source language
             */
            source: string;
            /**
             * Korean
             * @description Korean translation
             */
            korean: string;
        };
        /**
         * TranslatedTerms
         * @description Response model for term translation.
         */
        TranslatedTerms: {
            /**
             * Translations
             * @description List of term translations
             */
            translations?: components["schemas"]["TranslatedTerm"][];
        };
        /** TranslationJob */
        TranslationJob: {
            /** Filename */
            filename: string;
            /** Id */
            id: number;
            /** Status */
            status: string;
            /** Progress */
            progress: number;
            /** Segment Size */
            segment_size: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Completed At */
            completed_at?: string | null;
            /** Error Message */
            error_message?: string | null;
            /** Owner Id */
            owner_id?: number | null;
            /** Validation Enabled */
            validation_enabled?: boolean | null;
            /** Validation Status */
            validation_status?: string | null;
            /** Validation Progress */
            validation_progress?: number | null;
            /** Validation Sample Rate */
            validation_sample_rate?: number | null;
            /** Quick Validation */
            quick_validation?: boolean | null;
            /** Validation Completed At */
            validation_completed_at?: string | null;
            /** Post Edit Enabled */
            post_edit_enabled?: boolean | null;
            /** Post Edit Status */
            post_edit_status?: string | null;
            /** Post Edit Progress */
            post_edit_progress?: number | null;
            /** Post Edit Completed At */
            post_edit_completed_at?: string | null;
            /** Illustrations Enabled */
            illustrations_enabled?: boolean | null;
            /** Illustrations Status */
            illustrations_status?: string | null;
            /** Illustrations Progress */
            illustrations_progress?: number | null;
            /** Illustrations Count */
            illustrations_count?: number | null;
            /** Illustrations Data */
            illustrations_data?: {
                [key: string]: unknown;
            }[] | null;
            /** Character Profile */
            character_profile?: {
                [key: string]: unknown;
            } | null;
            /** Character Base Images */
            character_base_images?: {
                [key: string]: unknown;
            }[] | null;
            /** Character Base Selected Index */
            character_base_selected_index?: number | null;
            /** Character Base Directory */
            character_base_directory?: string | null;
            /** Final Glossary */
            final_glossary?: {
                [key: string]: unknown;
            } | null;
            structured_glossary?: components["schemas"]["TranslatedTerms"] | null;
        };
        /** User */
        User: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Email */
            email?: string | null;
            /** Name */
            name?: string | null;
            /** Id */
            id: number;
            /** Clerk User Id */
            clerk_user_id: string;
            /**
             * Role
             * @default user
             */
            role: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** ValidationRequest */
        ValidationRequest: {
            /**
             * Quick Validation
             * @default false
             */
            quick_validation: boolean;
            /**
             * Validation Sample Rate
             * @default 1
             */
            validation_sample_rate: number;
            /** Model Name */
            model_name?: string | null;
            /** Api Key */
            api_key?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    analyze_style_api_v1_analyze_style_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_analyze_style_api_v1_analyze_style_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StyleAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_glossary_api_v1_analyze_glossary_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_analyze_glossary_api_v1_analyze_glossary_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GlossaryAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_jobs_api_v1_jobs_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationJob"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_job_api_v1_jobs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_job_api_v1_jobs_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationJob"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_api_v1_jobs__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationJob"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_job_api_v1_jobs__job_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_job_output_legacy_api_v1_download__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_job_output_api_v1_jobs__job_id__output_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_job_log_api_v1_jobs__job_id__logs__log_type__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                log_type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_glossary_api_v1_jobs__job_id__glossary_get: {
        parameters: {
            query?: {
                structured?: boolean;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_segments_api_v1_jobs__job_id__segments_get: {
        parameters: {
            query?: {
                /** @description Starting segment index */
                offset?: number;
                /** @description Number of segments to return */
                limit?: number;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_content_api_v1_jobs__job_id__content_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_job_pdf_api_v1_jobs__job_id__pdf_get: {
        parameters: {
            query?: {
                /** @description Include source text in PDF */
                include_source?: boolean;
                /** @description Include illustrations in PDF */
                include_illustrations?: boolean;
                /** @description Page size (A4 or Letter) */
                page_size?: string;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_validation_api_v1_jobs__job_id__validation_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_validation_report_api_v1_jobs__job_id__validation_report_get: {
        parameters: {
            query?: {
                structured?: boolean;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_post_edit_api_v1_jobs__job_id__post_edit_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostEditRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_post_edit_log_api_v1_jobs__job_id__post_edit_log_get: {
        parameters: {
            query?: {
                structured?: boolean;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_image_api_v1_community_upload_image_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_image_api_v1_community_upload_image_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_categories_api_v1_community_categories_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostCategory"][];
                };
            };
        };
    };
    get_categories_with_recent_posts_api_v1_community_categories_overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_posts_api_v1_community_posts_get: {
        parameters: {
            query?: {
                category?: string | null;
                skip?: number;
                limit?: number;
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostList"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_post_api_v1_community_posts_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_post_api_v1_community_posts__post_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_post_api_v1_community_posts__post_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Post"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_post_api_v1_community_posts__post_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    increment_post_view_api_v1_community_posts__post_id__view_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_comments_api_v1_community_posts__post_id__comments_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_comment_api_v1_community_posts__post_id__comments_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_comment_api_v1_community_comments__comment_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comment_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_comment_api_v1_community_comments__comment_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_new_announcement_api_v1_admin_announcements_post: {
        parameters: {
            query?: never;
            header: {
                "x-admin-secret": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnouncementCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_existing_announcement_api_v1_admin_announcements__announcement_id__deactivate_put: {
        parameters: {
            query?: never;
            header: {
                "x-admin-secret": string;
            };
            path: {
                announcement_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_all_announcements_api_v1_admin_announcements_deactivate_all_put: {
        parameters: {
            query?: never;
            header: {
                "x-admin-secret": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    initialize_categories_api_v1_admin_community_init_categories_post: {
        parameters: {
            query?: never;
            header: {
                "x-admin-secret": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    handle_clerk_webhook_api_v1_webhooks_clerk_post: {
        parameters: {
            query?: never;
            header?: {
                "svix-id"?: string;
                "svix-timestamp"?: string;
                "svix-signature"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_announcements_api_v1_announcements_stream_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_core_schemas_api_v1_schemas_core_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_core_schema_api_v1_schemas_core__schema_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schema_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_backend_schemas_api_v1_schemas_backend_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    generate_illustrations_api_v1_illustrations__job_id__generate_post: {
        parameters: {
            query: {
                /** @description API key for Gemini */
                api_key: string;
                /** @description Maximum number of illustration prompts to generate */
                max_illustrations?: number | null;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IllustrationConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post: {
        parameters: {
            query: {
                /** @description API key for Gemini */
                api_key: string;
            };
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_character_bases_api_v1_illustrations__job_id__character_base_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_character_base_asset_api_v1_illustrations__job_id__character_base__index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    select_character_base_api_v1_illustrations__job_id__character_base_select_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: number;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_illustrations_api_v1_illustrations__job_id__illustrations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                segment_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
                segment_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    regenerate_illustration_prompt_api_v1_illustrations__job_id__regenerate__segment_index__post: {
        parameters: {
            query: {
                /** @description Optional style hints for regeneration */
                style_hints?: string | null;
                /** @description API key for Gemini */
                api_key: string;
            };
            header?: never;
            path: {
                job_id: number;
                segment_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
