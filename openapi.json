{
  "openapi": "3.1.0",
  "info": {
    "title": "Context-Aware Translation API",
    "description": "AI-powered literary translation service with context awareness",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/analyze-style": {
      "post": {
        "tags": [
          "analysis"
        ],
        "summary": "Analyze Style",
        "description": "Analyze the narrative style of a document.",
        "operationId": "analyze_style_api_v1_analyze_style_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_analyze_style_api_v1_analyze_style_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StyleAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analyze-glossary": {
      "post": {
        "tags": [
          "analysis"
        ],
        "summary": "Analyze Glossary",
        "description": "Extract glossary terms from a document.",
        "operationId": "analyze_glossary_api_v1_analyze_glossary_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_analyze_glossary_api_v1_analyze_glossary_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List Jobs",
        "description": "List all translation jobs for the current user.",
        "operationId": "list_jobs_api_v1_jobs_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TranslationJob"
                  },
                  "title": "Response List Jobs Api V1 Jobs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Create Job",
        "description": "Create a new translation job.",
        "operationId": "create_job_api_v1_jobs_post",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_job_api_v1_jobs_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job",
        "description": "Get a translation job.",
        "operationId": "get_job_api_v1_jobs__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "jobs"
        ],
        "summary": "Delete Job",
        "description": "Delete a translation job and its associated files.",
        "operationId": "delete_job_api_v1_jobs__job_id__delete",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/download/{job_id}": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Download Job Output Legacy",
        "description": "Legacy download endpoint for backward compatibility.",
        "operationId": "download_job_output_legacy_api_v1_download__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/output": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Download Job Output",
        "description": "Download the output of a translation job.",
        "operationId": "download_job_output_api_v1_jobs__job_id__output_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/logs/{log_type}": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Download Job Log",
        "description": "Download log files for a translation job.",
        "operationId": "download_job_log_api_v1_jobs__job_id__logs__log_type__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "log_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Log Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/glossary": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get Job Glossary",
        "description": "Get the final glossary for a completed translation job.\n\nArgs:\n    job_id: The job ID\n    structured: If True, returns a GlossaryAnalysisResponse with structured data\n\nReturns:\n    Either raw glossary dict or GlossaryAnalysisResponse depending on 'structured' param",
        "operationId": "get_job_glossary_api_v1_jobs__job_id__glossary_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "structured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Structured"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/segments": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get Job Segments",
        "description": "Get the segmented translation data for a completed translation job with pagination support.",
        "operationId": "get_job_segments_api_v1_jobs__job_id__segments_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Starting segment index",
              "default": 0,
              "title": "Offset"
            },
            "description": "Starting segment index"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "description": "Number of segments to return",
              "default": 3,
              "title": "Limit"
            },
            "description": "Number of segments to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/content": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get Job Content",
        "description": "Get the translated content as text for a completed translation job.",
        "operationId": "get_job_content_api_v1_jobs__job_id__content_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/pdf": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Download Job Pdf",
        "description": "Download the translation as a PDF document with optional illustrations.\n\nThis endpoint generates a professional PDF document containing:\n- Translated text segments\n- Source text (optional)\n- Illustrations for each segment where available\n- Proper formatting and pagination\n\nArgs:\n    job_id: ID of the translation job\n    include_source: Whether to include source text alongside translations\n    include_illustrations: Whether to embed generated illustrations\n    page_size: Page size format (A4 or Letter)\n\nReturns:\n    PDF file response",
        "operationId": "download_job_pdf_api_v1_jobs__job_id__pdf_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "include_source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include source text in PDF",
              "default": true,
              "title": "Include Source"
            },
            "description": "Include source text in PDF"
          },
          {
            "name": "include_illustrations",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include illustrations in PDF",
              "default": true,
              "title": "Include Illustrations"
            },
            "description": "Include illustrations in PDF"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Page size (A4 or Letter)",
              "default": "A4",
              "title": "Page Size"
            },
            "description": "Page size (A4 or Letter)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/validation": {
      "put": {
        "tags": [
          "validation"
        ],
        "summary": "Trigger Validation",
        "description": "Trigger validation on a completed translation job.",
        "operationId": "trigger_validation_api_v1_jobs__job_id__validation_put",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/validation-report": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Get Validation Report",
        "description": "Get the validation report for a job.\n\nArgs:\n    job_id: The job ID\n    structured: If True, returns a StructuredValidationReport with core ValidationResponse\n\nReturns:\n    Either raw JSON report or StructuredValidationReport depending on 'structured' param",
        "operationId": "get_validation_report_api_v1_jobs__job_id__validation_report_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "structured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Structured"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/post-edit": {
      "put": {
        "tags": [
          "post-edit"
        ],
        "summary": "Trigger Post Edit",
        "description": "Trigger post-editing on a validated translation job.",
        "operationId": "trigger_post_edit_api_v1_jobs__job_id__post_edit_put",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/post-edit-log": {
      "get": {
        "tags": [
          "post-edit"
        ],
        "summary": "Get Post Edit Log",
        "description": "Get the post-edit log for a job.\n\nArgs:\n    job_id: The job ID\n    structured: If True, returns a StructuredPostEditLog with ValidationCase objects\n\nReturns:\n    Either raw JSON log or StructuredPostEditLog depending on 'structured' param",
        "operationId": "get_post_edit_log_api_v1_jobs__job_id__post_edit_log_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "structured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Structured"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/upload-image": {
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Upload Image",
        "description": "Upload an image for posts.",
        "operationId": "upload_image_api_v1_community_upload_image_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_image_api_v1_community_upload_image_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/categories": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Get Categories",
        "description": "Get all post categories.",
        "operationId": "get_categories_api_v1_community_categories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PostCategory"
                  },
                  "type": "array",
                  "title": "Response Get Categories Api V1 Community Categories Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/categories/overview": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Get Categories With Recent Posts",
        "description": "Get categories with their recent posts for community overview.",
        "operationId": "get_categories_with_recent_posts_api_v1_community_categories_overview_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Get Posts",
        "description": "Get posts, masking private ones based on user permissions.",
        "operationId": "get_posts_api_v1_community_posts_get",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Category"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostList"
                  },
                  "title": "Response Get Posts Api V1 Community Posts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Create Post",
        "description": "Create a new post.",
        "operationId": "create_post_api_v1_community_posts_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts/{post_id}": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Get Post",
        "description": "Get a specific post, masking private comments based on user permissions.",
        "operationId": "get_post_api_v1_community_posts__post_id__get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "community"
        ],
        "summary": "Update Post",
        "description": "Update a post.",
        "operationId": "update_post_api_v1_community_posts__post_id__put",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "community"
        ],
        "summary": "Delete Post",
        "description": "Delete a post.",
        "operationId": "delete_post_api_v1_community_posts__post_id__delete",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts/{post_id}/view": {
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Increment Post View",
        "description": "Increment post view count (separate endpoint).",
        "operationId": "increment_post_view_api_v1_community_posts__post_id__view_post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts/{post_id}/comments": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Get Comments",
        "description": "Get comments for a post, masking private ones based on user permissions.",
        "operationId": "get_comments_api_v1_community_posts__post_id__comments_get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  },
                  "title": "Response Get Comments Api V1 Community Posts  Post Id  Comments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Create Comment",
        "description": "Create a comment on a post.",
        "operationId": "create_comment_api_v1_community_posts__post_id__comments_post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/comments/{comment_id}": {
      "put": {
        "tags": [
          "community"
        ],
        "summary": "Update Comment",
        "description": "Update a comment.",
        "operationId": "update_comment_api_v1_community_comments__comment_id__put",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Comment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "community"
        ],
        "summary": "Delete Comment",
        "description": "Delete a comment.",
        "operationId": "delete_comment_api_v1_community_comments__comment_id__delete",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Comment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/announcements": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create New Announcement",
        "description": "Create a new announcement.",
        "operationId": "create_new_announcement_api_v1_admin_announcements_post",
        "parameters": [
          {
            "name": "x-admin-secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Admin-Secret"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/announcements/{announcement_id}/deactivate": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Deactivate Existing Announcement",
        "description": "Deactivate a specific announcement.",
        "operationId": "deactivate_existing_announcement_api_v1_admin_announcements__announcement_id__deactivate_put",
        "parameters": [
          {
            "name": "announcement_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Announcement Id"
            }
          },
          {
            "name": "x-admin-secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Admin-Secret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/announcements/deactivate-all": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Deactivate All Announcements",
        "description": "Deactivate all active announcements.",
        "operationId": "deactivate_all_announcements_api_v1_admin_announcements_deactivate_all_put",
        "parameters": [
          {
            "name": "x-admin-secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Admin-Secret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/community/init-categories": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Initialize Categories",
        "description": "Initialize default post categories.",
        "operationId": "initialize_categories_api_v1_admin_community_init_categories_post",
        "parameters": [
          {
            "name": "x-admin-secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Admin-Secret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/webhooks/clerk": {
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Handle Clerk Webhook",
        "description": "Handle Clerk webhook events for user management.",
        "operationId": "handle_clerk_webhook_api_v1_webhooks_clerk_post",
        "parameters": [
          {
            "name": "svix-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Svix-Id"
            }
          },
          {
            "name": "svix-timestamp",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Svix-Timestamp"
            }
          },
          {
            "name": "svix-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Svix-Signature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/announcements/stream": {
      "get": {
        "tags": [
          "announcements"
        ],
        "summary": "Stream Announcements",
        "description": "Stream announcements via Server-Sent Events.",
        "operationId": "stream_announcements_api_v1_announcements_stream_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/core": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Get Core Schemas",
        "description": "Get all core JSON schemas used in structured output.\n\nReturns a dictionary mapping schema names to their JSON schema definitions.\nThese schemas are used by Gemini's structured output feature.",
        "operationId": "get_core_schemas_api_v1_schemas_core_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Core Schemas Api V1 Schemas Core Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/core/{schema_name}": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Get Core Schema",
        "description": "Get a specific core JSON schema by name.\n\nArgs:\n    schema_name: Name of the schema to retrieve\n    \nReturns:\n    The JSON schema definition for the specified schema\n    \nRaises:\n    404 if schema not found",
        "operationId": "get_core_schema_api_v1_schemas_core__schema_name__get",
        "parameters": [
          {
            "name": "schema_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Schema Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Core Schema Api V1 Schemas Core  Schema Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/backend": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Get Backend Schemas",
        "description": "Get all backend API schemas (DTOs).\n\nReturns schemas used in FastAPI endpoints for request/response models.",
        "operationId": "get_backend_schemas_api_v1_schemas_backend_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Backend Schemas Api V1 Schemas Backend Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/generate": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Generate Illustrations",
        "description": "Generate illustration prompts for a translation job.\n\nThis endpoint triggers generation of detailed illustration prompts for all or selected segments\nof a completed translation job. The prompts can then be used with image generation services\nlike DALL-E, Midjourney, or Stable Diffusion to create actual illustrations.",
        "operationId": "generate_illustrations_api_v1_illustrations__job_id__generate_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "API key for Gemini",
              "title": "Api Key"
            },
            "description": "API key for Gemini"
          },
          {
            "name": "max_illustrations",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum number of illustration prompts to generate",
              "title": "Max Illustrations"
            },
            "description": "Maximum number of illustration prompts to generate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IllustrationConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base/generate": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Generate Character Bases",
        "description": "Generate base character images (3 variations) focusing only on appearance.",
        "operationId": "generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "API key for Gemini",
              "title": "Api Key"
            },
            "description": "API key for Gemini"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Character Bases",
        "description": "Get generated base character images and current selection.",
        "operationId": "get_character_bases_api_v1_illustrations__job_id__character_base_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base/{index}": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Character Base Asset",
        "description": "Get a specific base asset (image if available, otherwise prompt JSON).",
        "operationId": "get_character_base_asset_api_v1_illustrations__job_id__character_base__index__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base/select": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Select Character Base",
        "description": "Select one of the generated base images by index.",
        "operationId": "select_character_base_api_v1_illustrations__job_id__character_base_select_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "title": "Selection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/illustrations": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Job Illustrations",
        "description": "Get all illustration prompts for a translation job.\n\nReturns metadata about all generated illustration prompts for the specified job.\nThese prompts can be used with external image generation services.",
        "operationId": "get_job_illustrations_api_v1_illustrations__job_id__illustrations_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/illustration/{segment_index}": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Illustration Prompt",
        "description": "Get the illustration for a specific segment.\n\nReturns the generated image if available, otherwise returns the prompt JSON file.",
        "operationId": "get_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "segment_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Segment Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "illustrations"
        ],
        "summary": "Delete Illustration Prompt",
        "description": "Delete a specific illustration and its prompt.\n\nRemoves both the image file (if exists) and prompt file, and updates the job metadata.",
        "operationId": "delete_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__delete",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "segment_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Segment Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/regenerate/{segment_index}": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Regenerate Illustration Prompt",
        "description": "Regenerate an illustration prompt for a specific segment.\n\nThis allows regenerating a single illustration prompt with optional new style hints.",
        "operationId": "regenerate_illustration_prompt_api_v1_illustrations__job_id__regenerate__segment_index__post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "segment_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Segment Index"
            }
          },
          {
            "name": "style_hints",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional style hints for regeneration",
              "title": "Style Hints"
            },
            "description": "Optional style hints for regeneration"
          },
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "API key for Gemini",
              "title": "Api Key"
            },
            "description": "API key for Gemini"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Read Root",
        "description": "Health check endpoint.",
        "operationId": "read_root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnnouncementCreate": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "AnnouncementCreate"
      },
      "Body_analyze_glossary_api_v1_analyze_glossary_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "gemini-2.5-flash-lite"
          }
        },
        "type": "object",
        "required": [
          "file",
          "api_key"
        ],
        "title": "Body_analyze_glossary_api_v1_analyze_glossary_post"
      },
      "Body_analyze_style_api_v1_analyze_style_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "gemini-2.5-flash-lite"
          }
        },
        "type": "object",
        "required": [
          "file",
          "api_key"
        ],
        "title": "Body_analyze_style_api_v1_analyze_style_post"
      },
      "Body_create_job_api_v1_jobs_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "gemini-2.5-flash-lite"
          },
          "translation_model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Translation Model Name"
          },
          "style_model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Style Model Name"
          },
          "glossary_model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Glossary Model Name"
          },
          "style_data": {
            "type": "string",
            "title": "Style Data"
          },
          "glossary_data": {
            "type": "string",
            "title": "Glossary Data"
          },
          "segment_size": {
            "type": "integer",
            "title": "Segment Size",
            "default": 15000
          }
        },
        "type": "object",
        "required": [
          "file",
          "api_key"
        ],
        "title": "Body_create_job_api_v1_jobs_post"
      },
      "Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post": {
        "properties": {
          "reference_image": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reference Image"
          },
          "profile_json": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Json"
          }
        },
        "type": "object",
        "title": "Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"
      },
      "Body_upload_image_api_v1_community_upload_image_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_image_api_v1_community_upload_image_post"
      },
      "CharacterInteraction": {
        "properties": {
          "character_name": {
            "type": "string",
            "title": "Character Name",
            "description": "Name of the character the protagonist is speaking to"
          },
          "speech_style": {
            "type": "string",
            "enum": [
              "반말",
              "해요체",
              "하십시오체"
            ],
            "title": "Speech Style",
            "description": "Korean speech style used (반말 for informal, 해요체 for polite informal, 하십시오체 for formal)"
          }
        },
        "type": "object",
        "required": [
          "character_name",
          "speech_style"
        ],
        "title": "CharacterInteraction",
        "description": "Single interaction between protagonist and another character."
      },
      "Comment": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "post_id": {
            "type": "integer",
            "title": "Post Id"
          },
          "replies": {
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "type": "array",
            "title": "Replies",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "content",
          "id",
          "author",
          "post_id"
        ],
        "title": "Comment"
      },
      "CommentCreate": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "post_id": {
            "type": "integer",
            "title": "Post Id"
          }
        },
        "type": "object",
        "required": [
          "content",
          "post_id"
        ],
        "title": "CommentCreate"
      },
      "CommentUpdate": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "CommentUpdate"
      },
      "DialogueAnalysisResult": {
        "properties": {
          "protagonist_name": {
            "type": "string",
            "title": "Protagonist Name",
            "description": "Name of the protagonist"
          },
          "interactions": {
            "items": {
              "$ref": "#/components/schemas/CharacterInteraction"
            },
            "type": "array",
            "title": "Interactions",
            "description": "List of character interactions found in this segment"
          },
          "has_dialogue": {
            "type": "boolean",
            "title": "Has Dialogue",
            "description": "Whether the protagonist has any dialogue in this segment",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "protagonist_name"
        ],
        "title": "DialogueAnalysisResult",
        "description": "Result of dialogue style analysis for a text segment."
      },
      "ExtractedTerms": {
        "properties": {
          "terms": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Terms",
            "description": "List of unique proper nouns found in the text. Empty list if none found."
          }
        },
        "type": "object",
        "title": "ExtractedTerms",
        "description": "Response model for proper noun extraction."
      },
      "GlossaryAnalysisResponse": {
        "properties": {
          "glossary": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Glossary"
          },
          "extracted_terms": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExtractedTerms"
              },
              {
                "type": "null"
              }
            ]
          },
          "translated_terms": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TranslatedTerms"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "glossary"
        ],
        "title": "GlossaryAnalysisResponse",
        "description": "Response for glossary analysis using core schemas"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IllustrationConfig": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether illustration generation is enabled",
            "default": false
          },
          "style": {
            "$ref": "#/components/schemas/IllustrationStyle",
            "description": "The artistic style for generated illustrations",
            "default": "digital_art"
          },
          "style_hints": {
            "type": "string",
            "title": "Style Hints",
            "description": "Additional style hints or preferences for illustration generation",
            "default": ""
          },
          "segments_per_illustration": {
            "type": "integer",
            "title": "Segments Per Illustration",
            "description": "Number of segments to combine for each illustration",
            "default": 1
          },
          "max_illustrations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Illustrations",
            "description": "Maximum number of illustrations to generate (None for unlimited)"
          },
          "skip_dialogue_heavy": {
            "type": "boolean",
            "title": "Skip Dialogue Heavy",
            "description": "Skip illustration for segments that are mostly dialogue",
            "default": true
          },
          "min_segment_length": {
            "type": "integer",
            "title": "Min Segment Length",
            "description": "Minimum segment length (characters) to generate illustration",
            "default": 500
          },
          "cache_enabled": {
            "type": "boolean",
            "title": "Cache Enabled",
            "description": "Whether to cache generated illustrations",
            "default": true
          }
        },
        "type": "object",
        "title": "IllustrationConfig",
        "description": "Configuration for illustration generation.\n\nThis model defines the settings and preferences for generating\nillustrations for translation segments."
      },
      "IllustrationStyle": {
        "type": "string",
        "enum": [
          "realistic",
          "artistic",
          "watercolor",
          "digital_art",
          "sketch",
          "anime",
          "vintage",
          "minimalist"
        ],
        "title": "IllustrationStyle",
        "description": "Enumeration of available illustration styles."
      },
      "NarrationStyle": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Brief description of the narrator's voice (e.g., 'A neutral, third-person observer's voice')"
          },
          "ending_style": {
            "type": "string",
            "title": "Ending Style",
            "description": "Korean sentence ending style for narration (almost always 해라체)",
            "default": "해라체"
          }
        },
        "type": "object",
        "required": [
          "description"
        ],
        "title": "NarrationStyle",
        "description": "Narration style details."
      },
      "NarrativeStyleDefinition": {
        "properties": {
          "protagonist_name": {
            "type": "string",
            "title": "Protagonist Name",
            "description": "The single most central character's name. If unclear, 'Protagonist'"
          },
          "narration_style": {
            "$ref": "#/components/schemas/NarrationStyle",
            "description": "Style and endings for narrative text"
          },
          "core_tone_keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 5,
            "minItems": 1,
            "title": "Core Tone Keywords",
            "description": "3-5 keywords describing the overall mood (Korean)"
          },
          "golden_rule": {
            "type": "string",
            "title": "Golden Rule",
            "description": "Overarching rule for the novel's feel and rhythm"
          }
        },
        "type": "object",
        "required": [
          "protagonist_name",
          "narration_style",
          "core_tone_keywords",
          "golden_rule"
        ],
        "title": "NarrativeStyleDefinition",
        "description": "Core narrative style definition for the entire work."
      },
      "Post": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned",
            "default": false
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Images",
            "default": []
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "category": {
            "$ref": "#/components/schemas/PostCategory"
          },
          "view_count": {
            "type": "integer",
            "title": "View Count"
          },
          "comments": {
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "type": "array",
            "title": "Comments",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "title",
          "content",
          "category_id",
          "id",
          "author",
          "category",
          "view_count"
        ],
        "title": "Post"
      },
      "PostCategory": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_admin_only": {
            "type": "boolean",
            "title": "Is Admin Only",
            "default": false
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "display_name",
          "id",
          "created_at"
        ],
        "title": "PostCategory"
      },
      "PostCreate": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned",
            "default": false
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Images",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "category_id"
        ],
        "title": "PostCreate"
      },
      "PostEditRequest": {
        "properties": {
          "selected_cases": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Selected Cases"
          },
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name"
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key"
          }
        },
        "type": "object",
        "title": "PostEditRequest"
      },
      "PostList": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "category": {
            "$ref": "#/components/schemas/PostCategory"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private"
          },
          "view_count": {
            "type": "integer",
            "title": "View Count"
          },
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Images",
            "default": []
          },
          "comment_count": {
            "type": "integer",
            "title": "Comment Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "id",
          "title",
          "author",
          "category",
          "is_pinned",
          "is_private",
          "view_count"
        ],
        "title": "PostList"
      },
      "PostUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "is_pinned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Pinned"
          },
          "images": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Images"
          }
        },
        "type": "object",
        "title": "PostUpdate"
      },
      "StyleAnalysisResponse": {
        "properties": {
          "protagonist_name": {
            "type": "string",
            "title": "Protagonist Name"
          },
          "narration_style_endings": {
            "type": "string",
            "title": "Narration Style Endings"
          },
          "tone_keywords": {
            "type": "string",
            "title": "Tone Keywords"
          },
          "stylistic_rule": {
            "type": "string",
            "title": "Stylistic Rule"
          },
          "narrative_style": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NarrativeStyleDefinition"
              },
              {
                "type": "null"
              }
            ]
          },
          "character_styles": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DialogueAnalysisResult"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Styles"
          }
        },
        "type": "object",
        "required": [
          "protagonist_name",
          "narration_style_endings",
          "tone_keywords",
          "stylistic_rule"
        ],
        "title": "StyleAnalysisResponse",
        "description": "Response for style analysis - extends core NarrativeStyleDefinition"
      },
      "TranslatedTerm": {
        "properties": {
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Source term in the source language"
          },
          "korean": {
            "type": "string",
            "title": "Korean",
            "description": "Korean translation"
          }
        },
        "type": "object",
        "required": [
          "source",
          "korean"
        ],
        "title": "TranslatedTerm",
        "description": "Single term translation pair."
      },
      "TranslatedTerms": {
        "properties": {
          "translations": {
            "items": {
              "$ref": "#/components/schemas/TranslatedTerm"
            },
            "type": "array",
            "title": "Translations",
            "description": "List of term translations"
          }
        },
        "type": "object",
        "title": "TranslatedTerms",
        "description": "Response model for term translation."
      },
      "TranslationJob": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress": {
            "type": "integer",
            "title": "Progress"
          },
          "segment_size": {
            "type": "integer",
            "title": "Segment Size"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "owner_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Owner Id"
          },
          "validation_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Enabled"
          },
          "validation_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Status"
          },
          "validation_progress": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Progress"
          },
          "validation_sample_rate": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Sample Rate"
          },
          "quick_validation": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quick Validation"
          },
          "validation_completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Completed At"
          },
          "post_edit_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Enabled"
          },
          "post_edit_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Status"
          },
          "post_edit_progress": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Progress"
          },
          "post_edit_completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Completed At"
          },
          "illustrations_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Enabled"
          },
          "illustrations_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Status"
          },
          "illustrations_progress": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Progress"
          },
          "illustrations_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Count"
          },
          "illustrations_data": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Data"
          },
          "character_profile": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Profile"
          },
          "character_base_images": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Base Images"
          },
          "character_base_selected_index": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Base Selected Index"
          },
          "character_base_directory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Base Directory"
          },
          "final_glossary": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Glossary"
          },
          "structured_glossary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TranslatedTerms"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "filename",
          "id",
          "status",
          "progress",
          "segment_size",
          "created_at"
        ],
        "title": "TranslationJob"
      },
      "User": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "clerk_user_id": {
            "type": "string",
            "title": "Clerk User Id"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "default": "user"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "id",
          "clerk_user_id"
        ],
        "title": "User"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ValidationRequest": {
        "properties": {
          "quick_validation": {
            "type": "boolean",
            "title": "Quick Validation",
            "default": false
          },
          "validation_sample_rate": {
            "type": "number",
            "title": "Validation Sample Rate",
            "default": 1.0
          },
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name"
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key"
          }
        },
        "type": "object",
        "title": "ValidationRequest"
      }
    }
  }
}