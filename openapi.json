{
  "openapi": "3.1.0",
  "info": {
    "title": "Context-Aware Translation System",
    "description": "AI-powered literary translation service with context awareness",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/jobs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List Jobs",
        "description": "List all translation jobs for the current user.\n\nArgs:\n    skip: Number of jobs to skip for pagination\n    limit: Maximum number of jobs to return\n    user: Current authenticated user\n    service: Translation domain service\n    \nReturns:\n    List of translation jobs",
        "operationId": "list_jobs_api_v1_jobs_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TranslationJob"
                  },
                  "title": "Response List Jobs Api V1 Jobs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Create Job",
        "description": "Create a new translation job.\n\nArgs:\n    file: File to translate\n    api_key: API key for translation service\n    model_name: Default model name\n    translation_model_name: Optional override for translation model\n    style_model_name: Optional override for style model\n    glossary_model_name: Optional override for glossary model\n    style_data: Optional style data\n    glossary_data: Optional glossary data\n    segment_size: Segment size for translation\n    enable_validation: Whether to run validation automatically after translation\n    quick_validation: Whether to use quick validation mode\n    validation_sample_rate: Portion of segments to validate (0.0-1.0)\n    enable_post_edit: Whether to run post-edit automatically after validation\n    user: Current authenticated user\n    service: Translation domain service\n    \nReturns:\n    Created translation job",
        "operationId": "create_job_api_v1_jobs_post",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_job_api_v1_jobs_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job",
        "description": "Get a translation job by ID.\n\nArgs:\n    job_id: Job ID\n    service: Translation domain service\n    \nReturns:\n    Translation job",
        "operationId": "get_job_api_v1_jobs__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "jobs"
        ],
        "summary": "Delete Job",
        "description": "Delete a translation job.\n\nArgs:\n    job_id: Job ID to delete\n    user: Current authenticated user\n    service: Translation domain service\n    \nReturns:\n    204 No Content response",
        "operationId": "delete_job_api_v1_jobs__job_id__delete",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/content": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job Content",
        "description": "Get the complete content of a translation job.\n\nArgs:\n    job_id: Job ID\n    service: Translation domain service\n    \nReturns:\n    Dict containing the job content and segments",
        "operationId": "get_job_content_api_v1_jobs__job_id__content_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Job Content Api V1 Jobs  Job Id  Content Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{job_id}/segments": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job Segments",
        "description": "Get segments from a translation job with pagination.\n\nArgs:\n    job_id: Job ID\n    offset: Number of segments to skip\n    limit: Maximum number of segments to return\n    service: Translation domain service\n    \nReturns:\n    Dict containing paginated segments",
        "operationId": "get_job_segments_api_v1_jobs__job_id__segments_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 200,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Job Segments Api V1 Jobs  Job Id  Segments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/validate/{job_id}": {
      "post": {
        "tags": [
          "validation"
        ],
        "summary": "Validate Job",
        "description": "Trigger validation on a completed translation job.\n\nArgs:\n    job_id: Job ID\n    request: Validation request parameters\n    user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Task information for the validation job",
        "operationId": "validate_job_api_v1_validate__job_id__post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/validation/{job_id}/status": {
      "get": {
        "tags": [
          "validation"
        ],
        "summary": "Get Validation Status",
        "description": "Get the validation report for a job.\n\nArgs:\n    job_id: Job ID\n    structured: Whether to return structured response\n    user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Validation report (structured or plain)",
        "operationId": "get_validation_status_api_v1_validation__job_id__status_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "structured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Structured"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/post-edit/{job_id}": {
      "post": {
        "tags": [
          "post-edit"
        ],
        "summary": "Post Edit Job",
        "description": "Trigger post-editing on a validated translation job.\n\nArgs:\n    job_id: Job ID\n    request: Post-edit request parameters\n    user: Current authenticated user\nReturns:\n    Task information for the post-edit job",
        "operationId": "post_edit_job_api_v1_post_edit__job_id__post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/post-edit/{job_id}/status": {
      "get": {
        "tags": [
          "post-edit"
        ],
        "summary": "Get Post Edit Status",
        "description": "Get the post-edit report for a job.\n\nArgs:\n    job_id: Job ID\n    user: Current authenticated user\nReturns:\n    Post-edit report with changes and statistics",
        "operationId": "get_post_edit_status_api_v1_post_edit__job_id__status_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/download/{job_id}": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "Download File",
        "description": "Download the output of a translation job.\n\nArgs:\n    job_id: Job ID\n    user: Current authenticated user (from dependency)\n    db: Database session (from dependency)\n    \nReturns:\n    FileResponse with the translated file",
        "operationId": "download_file_api_v1_download__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/export/{job_id}": {
      "post": {
        "tags": [
          "export"
        ],
        "summary": "Export Job",
        "description": "Export translation job in different formats.\n\nArgs:\n    job_id: Job ID\n    format: Export format (pdf, etc.)\n    include_source: Whether to include source text\n    include_illustrations: Whether to include illustrations\n    page_size: Page size format\n    user: Current authenticated user (from dependency)\n    db: Database session (from dependency)\n    \nReturns:\n    Response with exported file",
        "operationId": "export_job_api_v1_export__job_id__post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "pdf",
              "title": "Format"
            }
          },
          {
            "name": "include_source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Source"
            }
          },
          {
            "name": "include_illustrations",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Illustrations"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "A4",
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analysis/style": {
      "post": {
        "tags": [
          "analysis"
        ],
        "summary": "Analyze Style",
        "description": "Analyze the narrative style of a document.\n\nArgs:\n    file: Uploaded file to analyze\n    api_key: API key for the AI model\n    model_name: Model to use for analysis\n    \nReturns:\n    StyleAnalysisResponse with analysis results",
        "operationId": "analyze_style_api_v1_analysis_style_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_analyze_style_api_v1_analysis_style_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StyleAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analysis/glossary": {
      "post": {
        "tags": [
          "analysis"
        ],
        "summary": "Analyze Glossary",
        "description": "Extract glossary terms from a document.\n\nArgs:\n    file: Uploaded file to analyze\n    api_key: API key for the AI model\n    model_name: Model to use for analysis\n    \nReturns:\n    GlossaryAnalysisResponse with extracted terms",
        "operationId": "analyze_glossary_api_v1_analysis_glossary_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_analyze_glossary_api_v1_analysis_glossary_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analysis/characters": {
      "post": {
        "tags": [
          "analysis"
        ],
        "summary": "Analyze Characters",
        "description": "Analyze characters in a document.\n\nArgs:\n    file: Uploaded file to analyze\n    api_key: API key for the AI model\n    model_name: Model to use for analysis\n    \nReturns:\n    CharacterAnalysisResponse with character analysis results",
        "operationId": "analyze_characters_api_v1_analysis_characters_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_analyze_characters_api_v1_analysis_characters_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/generate": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Generate Illustrations",
        "description": "Generate illustration prompts for a translation job.\n\nThis endpoint triggers generation of detailed illustration prompts for all or selected segments\nof a completed translation job. The prompts can then be used with image generation services\nlike DALL-E, Midjourney, or Stable Diffusion to create actual illustrations.\n\nExpects JSON body with:\n- config: IllustrationConfig object\n- api_key: API key for Gemini\n- max_illustrations: Optional maximum number of illustrations",
        "operationId": "generate_illustrations_api_v1_illustrations__job_id__generate_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base/generate": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Generate Character Bases",
        "description": "Generate base character images (3 variations) focusing only on appearance.",
        "operationId": "generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/appearance/analyze": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Analyze Character Appearance",
        "description": "Analyze early novel text to produce appearance-only prompt candidates for the protagonist.\n\nExpects JSON body with:\n- api_key: API key for model\n- protagonist_name: Optional protagonist name\n- model_name: Model name for analysis (default: gemini-2.5-flash)",
        "operationId": "analyze_character_appearance_api_v1_illustrations__job_id__character_appearance_analyze_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base/generate-from-prompt": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Generate Base From Prompt",
        "description": "Generate base image(s) directly from provided prompt text(s).\nAccepts either JSON body with { prompts: string[] } or multipart with prompts_json/prompt.",
        "operationId": "generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Character Bases",
        "description": "Get generated base character images and current selection.",
        "operationId": "get_character_bases_api_v1_illustrations__job_id__character_base_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base/{index}": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Character Base Asset",
        "description": "Get a specific base asset (image if available, otherwise prompt JSON).",
        "operationId": "get_character_base_asset_api_v1_illustrations__job_id__character_base__index__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/character/base/select": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Select Character Base",
        "description": "Select one of the generated base images by index.",
        "operationId": "select_character_base_api_v1_illustrations__job_id__character_base_select_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "title": "Selection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/status": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Illustrations Status",
        "description": "Get the illustration generation status for a translation job.\n\nReturns lightweight status information without loading all illustration data.",
        "operationId": "get_illustrations_status_api_v1_illustrations__job_id__status_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/illustrations": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Job Illustrations",
        "description": "Get all illustration prompts for a translation job.\n\nReturns metadata about all generated illustration prompts for the specified job.\nThese prompts can be used with external image generation services.",
        "operationId": "get_job_illustrations_api_v1_illustrations__job_id__illustrations_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/illustration/{segment_index}": {
      "get": {
        "tags": [
          "illustrations"
        ],
        "summary": "Get Illustration Prompt",
        "description": "Get the illustration for a specific segment.\n\nReturns the generated image if available, otherwise returns the prompt JSON file.",
        "operationId": "get_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "segment_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Segment Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "illustrations"
        ],
        "summary": "Delete Illustration Prompt",
        "description": "Delete a specific illustration and its prompt.\n\nRemoves both the image file (if exists) and prompt file, and updates the job metadata.",
        "operationId": "delete_illustration_prompt_api_v1_illustrations__job_id__illustration__segment_index__delete",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "segment_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Segment Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/illustrations/{job_id}/regenerate/{segment_index}": {
      "post": {
        "tags": [
          "illustrations"
        ],
        "summary": "Regenerate Illustration Prompt",
        "description": "Regenerate an illustration prompt for a specific segment.\n\nThis allows regenerating a single illustration prompt with optional new style hints.\n\nExpects JSON body with:\n- api_key: API key for Gemini\n- style_hints: Optional style hints for regeneration",
        "operationId": "regenerate_illustration_prompt_api_v1_illustrations__job_id__regenerate__segment_index__post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          },
          {
            "name": "segment_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Segment Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get Task Status",
        "description": "Get the status of a specific task.\n\nReturns both database tracking info and real-time Celery status.",
        "operationId": "get_task_status_api_v1_tasks__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskExecutionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "List Tasks",
        "description": "List tasks with optional filters.\n\n- Users can see their own tasks\n- Admins can see all tasks\n- Anonymous users can't see any tasks",
        "operationId": "list_tasks_api_v1_tasks__get",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskKind"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Kind"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "job_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskExecutionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}/cancel": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Cancel Task",
        "description": "Cancel a running task.\n\nOnly the task owner or an admin can cancel a task.",
        "operationId": "cancel_task_api_v1_tasks__task_id__cancel_post",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/job/{job_id}/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get Job Tasks",
        "description": "Get all tasks associated with a specific job.",
        "operationId": "get_job_tasks_api_v1_tasks_job__job_id__tasks_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskExecutionResponse"
                  },
                  "title": "Response Get Job Tasks Api V1 Tasks Job  Job Id  Tasks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/stats/summary": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get Task Stats",
        "description": "Get task execution statistics.\n\nAdmin only endpoint.",
        "operationId": "get_task_stats_api_v1_tasks_stats_summary_get",
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of hours to look back",
              "default": 24,
              "title": "Hours"
            },
            "description": "Number of hours to look back"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsSimple"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "List Posts",
        "description": "Get posts with filtering and pagination.",
        "operationId": "list_posts_api_v1_community_posts_get",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Category name to filter by",
              "title": "Category"
            },
            "description": "Category name to filter by"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search query",
              "title": "Search"
            },
            "description": "Search query"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostList"
                  },
                  "title": "Response List Posts Api V1 Community Posts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Create Post",
        "description": "Create a new post.",
        "operationId": "create_post_api_v1_community_posts_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/categories": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "List Categories",
        "description": "Return all community categories.",
        "operationId": "list_categories_api_v1_community_categories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PostCategory"
                  },
                  "type": "array",
                  "title": "Response List Categories Api V1 Community Categories Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Create Category",
        "description": "Create a new category (admin only).",
        "operationId": "create_category_api_v1_community_categories_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCategoryCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/categories/overview": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "List Categories Overview",
        "description": "Return categories with aggregated statistics and recent posts.",
        "operationId": "list_categories_overview_api_v1_community_categories_overview_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CategoryOverview"
                  },
                  "type": "array",
                  "title": "Response List Categories Overview Api V1 Community Categories Overview Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts/{post_id}": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Get Post",
        "description": "Get a specific post with comments.",
        "operationId": "get_post_api_v1_community_posts__post_id__get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "community"
        ],
        "summary": "Update Post",
        "description": "Update an existing post.",
        "operationId": "update_post_api_v1_community_posts__post_id__put",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "community"
        ],
        "summary": "Delete Post",
        "description": "Delete a post.",
        "operationId": "delete_post_api_v1_community_posts__post_id__delete",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts/{post_id}/view": {
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Increment Post View",
        "description": "Increment the view count for a post.",
        "operationId": "increment_post_view_api_v1_community_posts__post_id__view_post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/posts/{post_id}/comments": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "List Post Comments",
        "description": "Get comments for a specific post.",
        "operationId": "list_post_comments_api_v1_community_posts__post_id__comments_get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  },
                  "title": "Response List Post Comments Api V1 Community Posts  Post Id  Comments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Create Comment",
        "description": "Create a comment on a post.",
        "operationId": "create_comment_api_v1_community_posts__post_id__comments_post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/comments/{comment_id}": {
      "put": {
        "tags": [
          "community"
        ],
        "summary": "Update Comment",
        "description": "Update an existing comment.",
        "operationId": "update_comment_api_v1_community_comments__comment_id__put",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Comment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "community"
        ],
        "summary": "Delete Comment",
        "description": "Delete a comment.",
        "operationId": "delete_comment_api_v1_community_comments__comment_id__delete",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Comment Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/images": {
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Upload Image",
        "description": "Handle community image uploads.",
        "operationId": "upload_image_api_v1_community_images_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_image_api_v1_community_images_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/categories/{category_id}": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Get Category",
        "description": "Get a specific category.",
        "operationId": "get_category_api_v1_community_categories__category_id__get",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "community"
        ],
        "summary": "Update Category",
        "description": "Update a category (admin only).",
        "operationId": "update_category_api_v1_community_categories__category_id__put",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCategoryCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "community"
        ],
        "summary": "Delete Category",
        "description": "Delete a category (admin only).",
        "operationId": "delete_category_api_v1_community_categories__category_id__delete",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/announcements": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "List Announcements",
        "description": "Get announcements with optional filtering.",
        "operationId": "list_announcements_api_v1_community_announcements_get",
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only return active announcements",
              "default": true,
              "title": "Active Only"
            },
            "description": "Only return active announcements"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum announcements to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum announcements to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Announcement"
                  },
                  "title": "Response List Announcements Api V1 Community Announcements Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "community"
        ],
        "summary": "Create Announcement",
        "description": "Create a new announcement (admin only).",
        "operationId": "create_announcement_api_v1_community_announcements_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/community/announcements/stream": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Stream Announcements",
        "description": "Stream announcements via Server-Sent Events (SSE).",
        "operationId": "stream_announcements_api_v1_community_announcements_stream_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/community/announcements/{announcement_id}": {
      "put": {
        "tags": [
          "community"
        ],
        "summary": "Update Announcement",
        "description": "Update an existing announcement (admin only).",
        "operationId": "update_announcement_api_v1_community_announcements__announcement_id__put",
        "parameters": [
          {
            "name": "announcement_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Announcement Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "community"
        ],
        "summary": "Delete Announcement",
        "description": "Delete an announcement (admin only).",
        "operationId": "delete_announcement_api_v1_community_announcements__announcement_id__delete",
        "parameters": [
          {
            "name": "announcement_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Announcement Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Current User",
        "description": "Get the current user's profile.",
        "operationId": "get_current_user_api_v1_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me/token-usage": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Token Usage",
        "description": "Return the authenticated user's token usage summary.",
        "operationId": "get_token_usage_api_v1_users_me_token_usage_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenUsageDashboard"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/posts/{post_id}": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete Any Post",
        "description": "Delete any post (requires POST_DELETE_ANY permission).",
        "operationId": "delete_any_post_api_v1_admin_posts__post_id__delete",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/core": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Get Core Schemas",
        "description": "Get all core JSON schemas used in structured output.\n\nReturns a dictionary mapping schema names to their JSON schema definitions.\nThese schemas are used by Gemini's structured output feature.",
        "operationId": "get_core_schemas_api_v1_schemas_core_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Core Schemas Api V1 Schemas Core Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/core/{schema_name}": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Get Core Schema",
        "description": "Get a specific core JSON schema by name.\n\nArgs:\n    schema_name: Name of the schema to retrieve\n    \nReturns:\n    The JSON schema definition for the specified schema\n    \nRaises:\n    404 if schema not found",
        "operationId": "get_core_schema_api_v1_schemas_core__schema_name__get",
        "parameters": [
          {
            "name": "schema_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Schema Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Core Schema Api V1 Schemas Core  Schema Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/backend": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Get Backend Schemas",
        "description": "Get all backend API schemas (DTOs).\n\nReturns schemas used in FastAPI endpoints for request/response models.",
        "operationId": "get_backend_schemas_api_v1_schemas_backend_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Backend Schemas Api V1 Schemas Backend Get"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Read Root",
        "description": "Health check endpoint.",
        "operationId": "read_root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Announcement": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "message",
          "id",
          "created_at"
        ],
        "title": "Announcement"
      },
      "AnnouncementCreate": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "AnnouncementCreate"
      },
      "AuthorSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "AuthorSummary",
        "description": "Minimal author information for community content."
      },
      "Body_analyze_characters_api_v1_analysis_characters_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "gemini-2.5-flash-lite"
          },
          "api_provider": {
            "type": "string",
            "title": "Api Provider",
            "default": "gemini"
          },
          "provider_config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config"
          }
        },
        "type": "object",
        "required": [
          "file",
          "api_key"
        ],
        "title": "Body_analyze_characters_api_v1_analysis_characters_post"
      },
      "Body_analyze_glossary_api_v1_analysis_glossary_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "gemini-2.5-flash-lite"
          },
          "api_provider": {
            "type": "string",
            "title": "Api Provider",
            "default": "gemini"
          },
          "provider_config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config"
          }
        },
        "type": "object",
        "required": [
          "file",
          "api_key"
        ],
        "title": "Body_analyze_glossary_api_v1_analysis_glossary_post"
      },
      "Body_analyze_style_api_v1_analysis_style_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "gemini-2.5-flash-lite"
          },
          "api_provider": {
            "type": "string",
            "title": "Api Provider",
            "default": "gemini"
          },
          "provider_config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config"
          }
        },
        "type": "object",
        "required": [
          "file",
          "api_key"
        ],
        "title": "Body_analyze_style_api_v1_analysis_style_post"
      },
      "Body_create_job_api_v1_jobs_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "gemini-2.5-flash-lite"
          },
          "translation_model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Translation Model Name"
          },
          "style_model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Style Model Name"
          },
          "glossary_model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Glossary Model Name"
          },
          "style_data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Style Data"
          },
          "glossary_data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Glossary Data"
          },
          "segment_size": {
            "type": "integer",
            "title": "Segment Size",
            "default": 15000
          },
          "enable_validation": {
            "type": "boolean",
            "title": "Enable Validation",
            "default": false
          },
          "quick_validation": {
            "type": "boolean",
            "title": "Quick Validation",
            "default": false
          },
          "validation_sample_rate": {
            "type": "number",
            "title": "Validation Sample Rate",
            "default": 1.0
          },
          "enable_post_edit": {
            "type": "boolean",
            "title": "Enable Post Edit",
            "default": false
          },
          "api_provider": {
            "type": "string",
            "title": "Api Provider",
            "default": "gemini"
          },
          "provider_config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config"
          }
        },
        "type": "object",
        "required": [
          "file",
          "api_key"
        ],
        "title": "Body_create_job_api_v1_jobs_post"
      },
      "Body_generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post": {
        "properties": {
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "API key for Gemini"
          },
          "reference_image": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reference Image"
          },
          "prompts_json": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompts Json"
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt"
          },
          "num_variations": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Num Variations",
            "description": "How many variants to generate when a single prompt is provided",
            "default": 3
          }
        },
        "type": "object",
        "required": [
          "api_key"
        ],
        "title": "Body_generate_base_from_prompt_api_v1_illustrations__job_id__character_base_generate_from_prompt_post"
      },
      "Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post": {
        "properties": {
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "API key for Gemini"
          },
          "reference_image": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reference Image"
          },
          "profile_json": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Json"
          }
        },
        "type": "object",
        "required": [
          "api_key"
        ],
        "title": "Body_generate_character_bases_api_v1_illustrations__job_id__character_base_generate_post"
      },
      "Body_upload_image_api_v1_community_images_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_image_api_v1_community_images_post"
      },
      "CategoryOverview": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_admin_only": {
            "type": "boolean",
            "title": "Is Admin Only",
            "default": false
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "total_posts": {
            "type": "integer",
            "title": "Total Posts"
          },
          "can_post": {
            "type": "boolean",
            "title": "Can Post"
          },
          "recent_posts": {
            "items": {
              "$ref": "#/components/schemas/PostSummary"
            },
            "type": "array",
            "title": "Recent Posts"
          }
        },
        "type": "object",
        "required": [
          "name",
          "display_name",
          "id",
          "created_at",
          "total_posts",
          "can_post"
        ],
        "title": "CategoryOverview",
        "description": "Extended category information for overview responses."
      },
      "CharacterAnalysisResponse": {
        "properties": {
          "characters": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Characters"
          },
          "interactions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CharacterInteraction"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Interactions"
          },
          "dialogue_analysis": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DialogueAnalysisResult"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dialogue Analysis"
          }
        },
        "type": "object",
        "required": [
          "characters"
        ],
        "title": "CharacterAnalysisResponse",
        "description": "Response for character analysis"
      },
      "CharacterInteraction": {
        "properties": {
          "character_name": {
            "type": "string",
            "title": "Character Name",
            "description": "Name of the character the protagonist is speaking to"
          },
          "speech_style": {
            "type": "string",
            "enum": [
              "반말",
              "해요체",
              "하십시오체"
            ],
            "title": "Speech Style",
            "description": "Korean speech style used (반말 for informal, 해요체 for polite informal, 하십시오체 for formal)"
          }
        },
        "type": "object",
        "required": [
          "character_name",
          "speech_style"
        ],
        "title": "CharacterInteraction",
        "description": "Single interaction between protagonist and another character."
      },
      "Comment": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "post_id": {
            "type": "integer",
            "title": "Post Id"
          },
          "replies": {
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "type": "array",
            "title": "Replies"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "content",
          "id",
          "author",
          "post_id"
        ],
        "title": "Comment"
      },
      "CommentCreate": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "post_id": {
            "type": "integer",
            "title": "Post Id"
          }
        },
        "type": "object",
        "required": [
          "content",
          "post_id"
        ],
        "title": "CommentCreate"
      },
      "CommentUpdate": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "is_private": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Private"
          }
        },
        "type": "object",
        "title": "CommentUpdate"
      },
      "DialogueAnalysisResult": {
        "properties": {
          "protagonist_name": {
            "type": "string",
            "title": "Protagonist Name",
            "description": "Name of the protagonist"
          },
          "interactions": {
            "items": {
              "$ref": "#/components/schemas/CharacterInteraction"
            },
            "type": "array",
            "title": "Interactions",
            "description": "List of character interactions found in this segment"
          },
          "has_dialogue": {
            "type": "boolean",
            "title": "Has Dialogue",
            "description": "Whether the protagonist has any dialogue in this segment",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "protagonist_name"
        ],
        "title": "DialogueAnalysisResult",
        "description": "Result of dialogue style analysis for a text segment."
      },
      "ExtractedTerms": {
        "properties": {
          "terms": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Terms",
            "description": "List of unique proper nouns found in the text. Empty list if none found."
          }
        },
        "type": "object",
        "title": "ExtractedTerms",
        "description": "Response model for proper noun extraction."
      },
      "GlossaryAnalysisResponse": {
        "properties": {
          "glossary": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Glossary"
          },
          "extracted_terms": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExtractedTerms"
              },
              {
                "type": "null"
              }
            ]
          },
          "translated_terms": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TranslatedTerms"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "glossary"
        ],
        "title": "GlossaryAnalysisResponse",
        "description": "Response for glossary analysis using core schemas"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ModelTokenUsage": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output Tokens"
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens"
          },
          "model": {
            "type": "string",
            "title": "Model"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "total_tokens",
          "model"
        ],
        "title": "ModelTokenUsage"
      },
      "NarrationStyle": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Brief description of the narrator's voice (e.g., 'A neutral, third-person observer's voice')"
          },
          "ending_style": {
            "type": "string",
            "title": "Ending Style",
            "description": "Korean sentence ending style for narration (almost always 해라체)",
            "default": "해라체"
          }
        },
        "type": "object",
        "required": [
          "description"
        ],
        "title": "NarrationStyle",
        "description": "Narration style details."
      },
      "NarrativeStyleDefinition": {
        "properties": {
          "protagonist_name": {
            "type": "string",
            "title": "Protagonist Name",
            "description": "The single most central character's name. If unclear, 'Protagonist'"
          },
          "narration_style": {
            "$ref": "#/components/schemas/NarrationStyle",
            "description": "Style and endings for narrative text"
          },
          "core_tone_keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 5,
            "minItems": 1,
            "title": "Core Tone Keywords",
            "description": "3-5 keywords describing the overall mood (Korean)"
          },
          "golden_rule": {
            "type": "string",
            "title": "Golden Rule",
            "description": "Overarching rule for the novel's feel and rhythm"
          }
        },
        "type": "object",
        "required": [
          "protagonist_name",
          "narration_style",
          "core_tone_keywords",
          "golden_rule"
        ],
        "title": "NarrativeStyleDefinition",
        "description": "Core narrative style definition for the entire work."
      },
      "Post": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned",
            "default": false
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Images"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "category": {
            "$ref": "#/components/schemas/PostCategory"
          },
          "view_count": {
            "type": "integer",
            "title": "View Count"
          },
          "comments": {
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "type": "array",
            "title": "Comments"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "title",
          "content",
          "category_id",
          "id",
          "author",
          "category",
          "view_count"
        ],
        "title": "Post"
      },
      "PostCategory": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_admin_only": {
            "type": "boolean",
            "title": "Is Admin Only",
            "default": false
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "display_name",
          "id",
          "created_at"
        ],
        "title": "PostCategory"
      },
      "PostCategoryCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_admin_only": {
            "type": "boolean",
            "title": "Is Admin Only",
            "default": false
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "name",
          "display_name"
        ],
        "title": "PostCategoryCreate"
      },
      "PostCreate": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned",
            "default": false
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Images"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "category_id"
        ],
        "title": "PostCreate"
      },
      "PostEditRequest": {
        "properties": {
          "selected_cases": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Selected Cases"
          },
          "modified_cases": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified Cases"
          },
          "default_select_all": {
            "type": "boolean",
            "title": "Default Select All",
            "default": true
          },
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name"
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key"
          },
          "api_provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Provider"
          },
          "provider_config": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Provider Config"
          }
        },
        "type": "object",
        "title": "PostEditRequest",
        "description": "Request schema for post-editing operations."
      },
      "PostList": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "category": {
            "$ref": "#/components/schemas/PostCategory"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private"
          },
          "view_count": {
            "type": "integer",
            "title": "View Count"
          },
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Images"
          },
          "comment_count": {
            "type": "integer",
            "title": "Comment Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "id",
          "title",
          "author",
          "category",
          "is_pinned",
          "is_private",
          "view_count"
        ],
        "title": "PostList"
      },
      "PostSummary": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private"
          },
          "view_count": {
            "type": "integer",
            "title": "View Count"
          },
          "comment_count": {
            "type": "integer",
            "title": "Comment Count",
            "default": 0
          },
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Images"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "id",
          "title",
          "author",
          "is_pinned",
          "is_private",
          "view_count"
        ],
        "title": "PostSummary",
        "description": "Compact representation of a post for category overviews."
      },
      "PostUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "is_private": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Private"
          },
          "is_pinned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Pinned"
          },
          "images": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Images"
          }
        },
        "type": "object",
        "title": "PostUpdate"
      },
      "StyleAnalysisResponse": {
        "properties": {
          "protagonist_name": {
            "type": "string",
            "title": "Protagonist Name"
          },
          "narration_style_endings": {
            "type": "string",
            "title": "Narration Style Endings"
          },
          "tone_keywords": {
            "type": "string",
            "title": "Tone Keywords"
          },
          "stylistic_rule": {
            "type": "string",
            "title": "Stylistic Rule"
          },
          "narrative_style": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NarrativeStyleDefinition"
              },
              {
                "type": "null"
              }
            ]
          },
          "character_styles": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DialogueAnalysisResult"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Styles"
          }
        },
        "type": "object",
        "required": [
          "protagonist_name",
          "narration_style_endings",
          "tone_keywords",
          "stylistic_rule"
        ],
        "title": "StyleAnalysisResponse",
        "description": "Response for style analysis - extends core NarrativeStyleDefinition"
      },
      "TaskExecutionListResponse": {
        "properties": {
          "tasks": {
            "items": {
              "$ref": "#/components/schemas/TaskExecutionResponse"
            },
            "type": "array",
            "title": "Tasks"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "offset": {
            "type": "integer",
            "title": "Offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "default": 20
          },
          "page": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "page_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Size"
          }
        },
        "type": "object",
        "required": [
          "tasks",
          "total"
        ],
        "title": "TaskExecutionListResponse",
        "description": "Response for list of task executions."
      },
      "TaskExecutionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "kind": {
            "$ref": "#/components/schemas/TaskKind"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "job_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Id"
          },
          "progress": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "attempts": {
            "type": "integer",
            "title": "Attempts",
            "default": 0
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries",
            "default": 3
          },
          "last_error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Error"
          },
          "next_retry_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Retry At"
          },
          "queue_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Queue Time"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time"
          },
          "duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration"
          },
          "queue_duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Queue Duration"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "celery_state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Celery State"
          },
          "celery_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Celery Info"
          },
          "args": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Args"
          },
          "kwargs": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Kwargs"
          },
          "result": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Result"
          }
        },
        "type": "object",
        "required": [
          "id",
          "kind",
          "name",
          "status",
          "created_at"
        ],
        "title": "TaskExecutionResponse",
        "description": "Response model for task execution status."
      },
      "TaskKind": {
        "type": "string",
        "enum": [
          "translation",
          "validation",
          "post_edit",
          "illustration",
          "event_processing",
          "maintenance",
          "other"
        ],
        "title": "TaskKind",
        "description": "Types of background tasks."
      },
      "TaskStatsSimple": {
        "properties": {
          "period_hours": {
            "type": "integer",
            "title": "Period Hours"
          },
          "status_counts": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Status Counts"
          },
          "kind_counts": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Kind Counts"
          },
          "average_durations": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Average Durations"
          },
          "total_tasks": {
            "type": "integer",
            "title": "Total Tasks"
          }
        },
        "type": "object",
        "required": [
          "period_hours",
          "status_counts",
          "kind_counts",
          "average_durations",
          "total_tasks"
        ],
        "title": "TaskStatsSimple",
        "description": "Simple task statistics."
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "pending",
          "started",
          "retry",
          "success",
          "failure",
          "revoked",
          "running"
        ],
        "title": "TaskStatus",
        "description": "Task execution status."
      },
      "TokenUsageDashboard": {
        "properties": {
          "total": {
            "$ref": "#/components/schemas/TokenUsageTotals"
          },
          "per_model": {
            "items": {
              "$ref": "#/components/schemas/ModelTokenUsage"
            },
            "type": "array",
            "title": "Per Model"
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "total",
          "per_model"
        ],
        "title": "TokenUsageDashboard"
      },
      "TokenUsageTotals": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output Tokens"
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "total_tokens"
        ],
        "title": "TokenUsageTotals"
      },
      "TranslatedTerm": {
        "properties": {
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Source term in the source language"
          },
          "korean": {
            "type": "string",
            "title": "Korean",
            "description": "Korean translation"
          }
        },
        "type": "object",
        "required": [
          "source",
          "korean"
        ],
        "title": "TranslatedTerm",
        "description": "Single term translation pair."
      },
      "TranslatedTerms": {
        "properties": {
          "translations": {
            "items": {
              "$ref": "#/components/schemas/TranslatedTerm"
            },
            "type": "array",
            "title": "Translations",
            "description": "List of term translations"
          }
        },
        "type": "object",
        "title": "TranslatedTerms",
        "description": "Response model for term translation."
      },
      "TranslationJob": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress": {
            "type": "integer",
            "title": "Progress"
          },
          "segment_size": {
            "type": "integer",
            "title": "Segment Size"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "owner_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Owner Id"
          },
          "validation_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Enabled"
          },
          "validation_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Status"
          },
          "validation_progress": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Progress"
          },
          "validation_sample_rate": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Sample Rate"
          },
          "quick_validation": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quick Validation"
          },
          "validation_completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Completed At"
          },
          "post_edit_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Enabled"
          },
          "post_edit_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Status"
          },
          "post_edit_progress": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Progress"
          },
          "post_edit_completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Post Edit Completed At"
          },
          "illustrations_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Enabled"
          },
          "illustrations_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Status"
          },
          "illustrations_progress": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Progress"
          },
          "illustrations_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Count"
          },
          "illustrations_data": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Illustrations Data"
          },
          "character_profile": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Profile"
          },
          "character_base_images": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Base Images"
          },
          "character_base_selected_index": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Base Selected Index"
          },
          "character_base_directory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Base Directory"
          },
          "final_glossary": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Glossary"
          },
          "structured_glossary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TranslatedTerms"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "filename",
          "id",
          "status",
          "progress",
          "segment_size",
          "created_at"
        ],
        "title": "TranslationJob"
      },
      "User": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "clerk_user_id": {
            "type": "string",
            "title": "Clerk User Id"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "default": "user"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "id",
          "clerk_user_id"
        ],
        "title": "User"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ValidationRequest": {
        "properties": {
          "quick_validation": {
            "type": "boolean",
            "title": "Quick Validation",
            "default": false
          },
          "validation_sample_rate": {
            "type": "number",
            "title": "Validation Sample Rate",
            "default": 1.0
          },
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name"
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key"
          },
          "api_provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Provider"
          },
          "provider_config": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Provider Config"
          }
        },
        "type": "object",
        "title": "ValidationRequest",
        "description": "Request schema for validation operations."
      }
    }
  }
}